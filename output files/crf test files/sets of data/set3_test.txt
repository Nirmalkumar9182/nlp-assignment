High	JJ
Resolution	NNP
,	,
Low	NNP
Overhead	NNP
Timing	NNP
for	IN
Intel	NNP
Processors	NNPS
If	IN
you're	VBN
		
on	IN
Intel	NNP
hardware	NN
,	,
here's	VB
how	WRB
to	TO
read	VB
the	DT
CPU	NNP
real-time	JJ
		
instruction	NN
counter	NN
.	.
It	PRP
will	MD
tell	VB
you	PRP
the	DT
number	NN
of	IN
CPU	NNP
		
cycles	NNS
executed	VBD
since	IN
the	DT
processor	NN
was	VBD
booted	VBN
.	.
This	DT
is	VBZ
probably	RB
		
the	DT
finest-grained	JJ
counter	NN
you	PRP
can	MD
get	VB
for	IN
performance	NN
measurement	NN
.	.
Note	NN
		
that	IN
this	DT
is	VBZ
the	DT
number	NN
of	IN
CPU	NNP
cycles	NNS
.	.
On	IN
linux	IN
		
you	PRP
can	MD
get	VB
the	DT
CPU	NNP
speed	NN
from	IN
/proc	NNP
/cpuinfo	NNP
and	CC
divide	VB
		
to	TO
get	VB
the	DT
number	NN
of	IN
seconds	NNS
.	.
Converting	VBG
this	DT
to	TO
a	DT
		
double	NN
is	VBZ
quite	RB
handy	JJ
.	.
When	WRB
I	PRP
run	VBP
this	DT
on	IN
my	PRP$
		
box	NN
,	,
I	PRP
get	VBP
11867927879484732	CD
11867927879692217	CD
it	PRP
took	VBD
this	DT
long	JJ
to	TO
		
call	VB
printf	NN
:	:
207485	CD
Here's	NNP
the	DT
Intel	NNP
developer's	NN
guide	NN
that	WDT
gives	VBZ
		
tons	NNS
of	IN
detail	NN
.	.
#include	JJ
<stdio	NN
.	.
h	NN
>	JJ
#include	NNP
<stdint	NNP
		
.	.
h	NN
>	JJ
inline	NN
uint64_t	JJ
rdtsc()	NN
{	(
uint32_t	JJ
lo	NN
,	,
hi	NN
		
;	:
__asm__	CC
__volatile__	NNP
(	(
"xorl	CD
%	NN
%eax	NNP
,	,
%	NN
%eax	NNP
\n	NNP
		
"	NNP
"cpuid	NNP
\n	NNP
"	NNP
"rdtsc	NNP
\n	NNP
"	NN
:	:
"	JJ
=a	NN
"	NNP
		
(	(
lo	NN
)	)
,	,
"	JJ
=d	NN
"	NNP
(	(
hi	NN
)	)
:	:
		
:	:
"	NN
%ebx	NNP
"	NNP
,	,
"	NNP
%ecx	NNP
"	NNP
)	)
;	:
return	NN
		
(	(
uint64_t	JJ
)hi	NNP
<	NNP
<	VBD
32	CD
|	NNP
lo	NN
;	:
}	)
main()	FW
		
{	(
unsigned	JJ
long	RB
long	RB
x	RB
;	:
unsigned	JJ
long	RB
long	RB
y	RB
;	:
		
x	NNP
=	NNP
rdtsc()	NN
;	:
printf(	CC
"	VB
%lld	JJ
\n	NNP
"	NNP
,	,
x	NNP
		
)	)
;	:
y	CC
=	NNP
rdtsc()	VBP
;	:
printf(	CC
"	VB
%lld	JJ
\n	NNP
"	NNP
		
,	,
y	NN
)	)
;	:
printf(	CC
"it	VB
took	VBD
this	DT
long	JJ
to	TO
call	VB
		
printf	NN
:	:
%lld	JJ
\n	NNP
"	NNP
,	,
y-x	NN
)	)
;	:
}	)
Personally	NNP
		
I	PRP
would	MD
do	VB
something	NN
like	IN
this	DT
:	:
<	NN
?php	NNP
$data	NNP
=	NNP
		
array(	IN
$rating	VBG
[0	JJ
]	NNP
=	NNP
>	NNP
array(	NN
'	''
word0	NN
'	''
,	,
		
'	''
word1	NN
'	''
,	,
'	''
word2	NN
'	''
)	)
,	,
$rating	VBG
[1	JJ
		
]	NNP
=	NNP
>	NNP
array(	NN
'	''
word3	NN
'	''
,	,
'	''
word4	NN
'	''
		
,	,
'	''
word8	NN
'	''
,	,
...	:
)	)
)	)
;	:
/	CC
/assums	NNS
		
that	IN
$rating	VBG
is	VBZ
an	DT
array	NN
with	IN
the	DT
weight	NN
of	IN
each	DT
word	NN
		
so	IN
the	DT
more	JJR
popular	JJ
words	NNS
would	MD
have	VB
a	DT
higher	JJR
value	NN
in	IN
		
rating	NN
usort(	JJ
$data	NNP
)	)
;	:
/	CC
/sort	VB
the	DT
$data	NNP
variable	NN
,	,
		
this	DT
should	MD
give	VB
us	PRP
the	DT
most	RBS
popular	JJ
words	NNS
first	RB
$size	VB
=	NNP
		
'	POS
1	CD
'	POS
;	:
foreach(	NNS
$data	VBP
as	IN
$rank	NN
)	)
{	(
$i	JJ
		
=0	NN
;	:
while(	CC
$i	VB
<	JJ
$count	NNP
(	(
$rank	NNP
)	)
)	)
{	(
		
echo	JJ
"	NN
<h	NNP
"	NNP
.	.
$size	VB
.	.
"	VB
>	JJ
"	NNP
.	.
		
$rank	NN
[	JJ
$i	NNP
]	NNP
.	.
"	VB
<	JJ
/h	NNP
"	NNP
.	.
$size	VB
		
.	.
"	VB
>	JJ
"	NNP
;	:
$i	NNP
+	NNP
+	NNP
;	:
}	)
$size	VB
		
+	JJ
+	NN
;	:
}	)
?	.
>	JJ
Assuming	NNP
I'm	NNP
not	RB
a	DT
complete	JJ
		
idiot	NN
this	DT
should	MD
work	VB
.	.
But	CC
it	PRP
is	VBZ
untested	JJ
.	.
What	WP
		
is	VBZ
the	DT
meaning	NN
of	IN
the	DT
Java	NNP
warning	NN
?	.
Type	NNP
safety	NN
:	:
		
The	DT
cast	NN
from	IN
Object	NNP
to	TO
List	NNP
is	VBZ
actually	RB
checking	VBG
against	IN
the	DT
		
erased	JJ
type	NN
List	NN
I	PRP
get	VBP
this	DT
warning	NN
when	WRB
I	PRP
try	VBP
to	TO
		
cast	VB
an	DT
Object	NNP
to	TO
a	DT
type	NN
with	IN
generic	JJ
information	NN
,	,
such	JJ
		
as	IN
in	IN
the	DT
following	JJ
code	NN
:	:
Object	JJ
object	NN
=	NNP
getMyList()	NN
;	:
		
List	NNP
<Integer	NNP
>	NNP
list	NN
=	NNP
(	(
List	NNP
<Integer	NNP
>	NNP
)	)
object	VBP
		
;	:
I'm	NNP
not	RB
sure	JJ
why	WRB
you	PRP
would	MD
want	VB
to	TO
do	VB
this	DT
		
in	IN
the	DT
first	JJ
place	NN
.	.
The	DT
resulting	VBG
set	NN
for	IN
any	DT
moderately	RB
		
large	JJ
values	NNS
of	IN
x	NN
and	CC
y	NN
will	MD
be	VB
huge	JJ
,	,
and	CC
		
will	MD
grow	VB
exponentially	RB
as	IN
x	NN
and	CC
/or	NNP
y	NNP
get	VB
bigger	JJR
.	.
		
Lets	NNS
say	VBP
your	PRP$
set	NN
of	IN
possible	JJ
characters	NNS
is	VBZ
the	DT
26	CD
lowercase	NN
		
letters	NNS
of	IN
the	DT
alphabet	NN
,	,
and	CC
you	PRP
ask	VBP
your	PRP$
application	NN
to	TO
		
generate	VB
all	DT
permutations	NNS
where	WRB
length	NN
=	VBZ
5	CD
.	.
Assuming	VBG
you	PRP
don't	VBP
		
run	VB
out	IN
of	IN
memory	NN
you'll	NN
get	VB
11	CD
,	,
881	CD
,	,
376	CD
		
(	(
i	NN
.	.
e	NN
.	.
26	CD
to	TO
the	DT
power	NN
of	IN
5	CD
		
)	)
strings	NNS
back	RB
.	.
Bump	NN
that	WDT
length	VBZ
up	IN
to	TO
6	CD
,	,
		
and	CC
you'll	RB
get	VB
308	CD
,	,
915	CD
,	,
776	CD
strings	NNS
back	RB
.	.
		
These	DT
numbers	NNS
get	VBP
painfully	RB
large	JJ
,	,
very	RB
quickly	RB
.	.
Here's	VB
a	DT
		
solution	NN
I	PRP
put	VBP
together	RB
in	IN
Java	NNP
.	.
You'll	NNP
need	VBP
to	TO
provide	VB
		
two	CD
runtime	JJ
arguments	NNS
(	(
corresponding	VBG
to	TO
x	VB
and	CC
y	VB
)	)
.	.
		
Have	VBP
fun	VBN
.	.
public	JJ
class	NN
GeneratePermutations	NNP
{	(
public	JJ
static	JJ
void	NN
main(	NN
		
String	NNP
[	NNP
]	NNP
args	NN
)	)
{	(
int	NN
lower	RBR
=	NNP
Integer.parseInt(	NNP
args	VBZ
		
[0	NNP
]	NNP
)	)
;	:
int	JJ
upper	JJ
=	NN
Integer.parseInt(	NNP
args	VBZ
[1	NNP
]	NNP
		
)	)
;	:
if	IN
(	(
upper	JJ
<	NNP
lower	JJR
|	NNP
|	NNP
upper	JJ
=	NNP
		
=	NNP
0	CD
|	NNP
|	NNP
lower	JJR
=	NNP
=	NNP
0	CD
)	)
{	(
System.exit(	NNP
		
0	CD
)	)
;	:
}	)
for	IN
(	(
int	JJ
length	NN
=	NNP
lower	JJR
;	:
		
length	NN
<	NNP
=	NNP
upper	IN
;	:
length	CC
+	NNP
+	NNP
)	)
{	(
generate(	JJ
		
length	NN
,	,
"	NNP
"	NNP
)	)
;	:
}	)
}	)
private	JJ
static	JJ
void	NN
		
generate(	NN
int	NN
length	NN
,	,
String	NNP
partial	NN
)	)
{	(
if	IN
(	(
length	FW
		
<	NNP
=	NNP
0	CD
)	)
{	(
System.out.println(	NNP
partial	JJ
)	)
;	:
}	)
else	RB
		
{	(
for	IN
(	(
char	JJ
c	NN
=	NNP
'	POS
a	DT
'	POS
;	:
c	NNS
		
<	VBP
=	NNP
'	POS
z	NN
'	''
;	:
c	VB
+	NNP
+	NNP
)	)
{	(
		
generate(	JJ
length	NN
-	:
1	CD
,	,
partial	JJ
+	NNP
c	NN
)	)
;	:
}	)
		
}	)
}	)
}	)
The	DT
scoring	NN
contains	VBZ
the	DT
Inverse	NNP
Document	NNP
Frequency(	NNP
IDF	NNP
		
)	)
.	.
If	IN
the	DT
term	NN
"John	NNP
Smith	NNP
"	NNP
is	VBZ
in	IN
one	CD
		
partition	NN
,	,
0	CD
,	,
100	CD
times	NNS
and	CC
in	IN
partition	NN
1	CD
,	,
		
once	RB
.	.
The	DT
score	NN
for	IN
searching	VBG
for	IN
John	NNP
Smith	NNP
would	MD
be	VB
		
higher	JJR
search	NN
in	IN
partition	NN
1	CD
as	IN
the	DT
term	NN
is	VBZ
more	RBR
scarce	JJ
		
.	.
To	TO
get	VB
round	VB
this	DT
you	PRP
would	MD
wither	RB
have	VB
to	TO
have	VB
		
your	PRP$
index	NN
being	VBG
over	IN
all	DT
partitions	NNS
,	,
or	CC
you	PRP
would	MD
need	VB
		
to	TO
override	VB
the	DT
IDF	NNP
.	.
Part	NN
of	IN
my	PRP$
everyday	JJ
work	NN
is	VBZ
		
maintaining	VBG
and	CC
extending	VBG
legacy	NN
VB6	NNP
applications	NNS
.	.
A	DT
common	JJ
engine	NN
is	VBZ
		
written	VBN
in	IN
C	NNP
/C	NNP
+	NNP
+	NNP
and	CC
VB6	NNP
uses	VBZ
these	DT
functions	NNS
		
in	IN
order	NN
to	TO
improve	VB
performance	NN
.	.
When	WRB
it	PRP
comes	VBZ
to	TO
asynchronous	JJ
		
programming	NN
,	,
a	DT
C	NNP
interface	NN
is	VBZ
not	RB
enough	JJ
and	CC
we	PRP
rely	VBP
		
on	IN
COM	NNP
controls	VBZ
to	TO
fire	VB
events	NNS
to	TO
VB6	NNP
.	.
My	PRP$
problem	NN
		
is	VBZ
that	IN
when	WRB
I	PRP
register	VBP
the	DT
control	NN
in	IN
VB6	NNP
,	,
VB	NNP
		
loads	VBZ
this	DT
control	NN
in	IN
memory	NN
and	CC
does	VBZ
not	RB
unload	VB
it	PRP
until	IN
		
I	PRP
quit	VBP
the	DT
VB6	NNP
IDE	NNP
.	.
As	IN
the	DT
control	NN
is	VBZ
loaded	VBN
		
the	DT
whole	JJ
time	NN
,	,
I	PRP
am	VBP
unable	JJ
to	TO
recompile	VB
it	PRP
in	IN
		
VC6	NNP
,	,
because	IN
the	DT
DLL	NNP
file	NN
is	VBZ
locked	VBN
.	.
A	DT
solution	NN
		
I	PRP
found	VBD
is	VBZ
not	RB
to	TO
enable	VB
the	DT
control	NN
in	IN
VB	NNP
but	CC
		
use	VBP
the	DT
CreateObject()	NNP
with	IN
the	DT
full	JJ
name	NN
of	IN
my	PRP$
control	NN
.	.
		
The	DT
problem	NN
then	RB
is	VBZ
that	IN
I	PRP
must	MD
declare	VB
my	PRP$
control	NN
as	IN
		
an	DT
Object	NNP
because	IN
VB6	NNP
knows	VBZ
nothing	NN
of	IN
the	DT
interface	NN
I	PRP
am	VBP
		
using	VBG
and	CC
I	PRP
do	VBP
not	RB
have	VB
access	NN
to	TO
IntelliSense	NNP
,	,
which	WDT
		
is	VBZ
a	DT
pain	NN
.	.
Any	DT
idea	NN
how	WRB
I	PRP
can	MD
tell	VB
VB6	NNP
		
to	TO
unload	VB
controls	NNS
after	IN
quitting	VBG
the	DT
application	NN
?	.
Or	CC
directly	RB
in	IN
		
the	DT
IDE	NNP
?	.
Ok	NNP
,	,
I'm	NNP
a	DT
web	NN
developer	NN
,	,
but	CC
		
I	PRP
find	VBP
myself	PRP
dabbling	VBG
in	IN
windows	NNS
forms	NNS
projects	NNS
every	DT
now	RB
and	CC
		
then	RB
.	.
One	CD
thing	NN
that	WDT
confounds	VBZ
me	PRP
to	TO
this	DT
day	NN
is	VBZ
		
the	DT
following	VBG
.	.
Assume	NNP
you	PRP
are	VBP
doing	VBG
something	NN
like	IN
the	DT
following	JJ
		
List	NN
<string	VBG
>	JJ
myitems	NNS
=	VBP
new	JJ
List	NNP
<string	NNP
>	NNP
{	(
"Item	NN
		
1	CD
"	NN
,	,
"Item	VBP
2	CD
"	NN
,	,
"Item	VBP
3	CD
"	JJ
}	)
		
;	:
ComboBox	NNP
box	NN
=	NNP
new	JJ
ComboBox()	NNP
;	:
box	NN
.	.
DataSource	NNP
=	JJ
		
myitems	NNS
;	:
ComboBox	NNP
box2	VBZ
=	NNP
new	JJ
ComboBox()	NNP
;	:
box2	NN
.	.
DataSource	NNP
		
=	JJ
myitems	NNS
So	RB
now	RB
we	PRP
have	VBP
2	CD
combo	JJ
boxes	NNS
bound	VBD
to	TO
		
that	DT
array	NN
,	,
and	CC
everything	NN
works	NNS
fine	VBP
.	.
But	CC
when	WRB
you	PRP
		
change	VBP
the	DT
value	NN
of	IN
one	CD
combo	NN
box	NN
,	,
it	PRP
changes	VBZ
BOTH	NNP
		
combo	NN
boxes	NNS
to	TO
the	DT
one	CD
you	PRP
just	RB
selected	VBN
.	.
Now	RB
,	,
		
I	PRP
know	VBP
that	DT
Arrays	NNS
are	VBP
always	RB
passed	VBN
by	IN
reference	NN
(	(
learned	VBN
		
that	IN
when	WRB
i	NN
learned	VBD
C	NNP
:D	NNP
)	)
,	,
but	CC
why	WRB
on	IN
		
earth	NN
would	MD
the	DT
combo	JJ
boxes	NNS
change	VBP
together	RB
?	.
I	PRP
don't	VBP
believe	VB
		
the	DT
combo	NN
box	NN
control	NN
is	VBZ
modifying	VBG
the	DT
collection	NN
at	IN
all	DT
.	.
		
As	IN
a	DT
work	NN
around	RB
,	,
don't	NN
this	DT
would	MD
achieve	VB
the	DT
funcionality	NN
		
that	WDT
is	VBZ
expected	VBN
/	RB
desired	VBN
ComboBox	NNP
box	NN
=	NNP
new	JJ
ComboBox()	NNP
;	:
		
box	NN
.	.
DataSource	NNP
=	NNP
myitems.ToArray()	NN
;	:
So	CC
it	PRP
says	VBZ
microseconds	VBZ
explicitly	RB
		
,	,
but	CC
says	VBZ
the	DT
resolution	NN
of	IN
the	DT
system	NN
clock	NN
is	VBZ
unspecified	JJ
		
.	.
I	PRP
suppose	VBP
resolution	NN
in	IN
this	DT
context	NN
means	VBZ
how	WRB
the	DT
smallest	JJS
		
amount	NN
it	PRP
will	MD
ever	RB
be	VB
incremented	VBN
?	.
The	DT
data	NN
structure	NN
is	VBZ
		
defined	VBN
as	IN
having	VBG
microseconds	NNS
as	IN
a	DT
unit	NN
of	IN
measurement	NN
,	,
but	CC
		
that	IN
doesn't	JJ
mean	VB
that	IN
the	DT
clock	NN
or	CC
operating	NN
system	NN
is	VBZ
actually	RB
		
capable	JJ
of	IN
measuring	VBG
that	DT
finely	RB
.	.
Like	IN
other	JJ
people	NNS
have	VBP
suggested	VBN
		
,	,
gettimeofday()	NN
is	VBZ
bad	JJ
because	IN
setting	VBG
the	DT
time	NN
can	MD
cause	VB
clock	NN
		
skew	NN
and	CC
throw	VB
off	RP
your	PRP$
calculation	NN
.	.
clock_gettime(	VB
CLOCK_MONOTONIC	NNP
)	)
is	VBZ
		
what	WP
you	PRP
want	VBP
,	,
and	CC
clock_getres()	NN
will	MD
tell	VB
you	PRP
the	DT
precision	NN
		
of	IN
your	PRP$
clock	NN
.	.
The	DT
Monte	NNP
Carlo	NNP
method	NN
,	,
as	IN
mentioned	VBN
		
,	,
applies	VBZ
some	DT
great	JJ
concepts	NNS
but	CC
it	PRP
is	VBZ
,	,
clearly	RB
,	,
		
not	RB
the	DT
fastest	JJS
--	:
not	RB
by	IN
a	DT
long	JJ
shot	NN
,	,
not	RB
		
by	IN
any	DT
reasonable	JJ
usefulness	NN
.	.
Also	RB
,	,
it	PRP
all	DT
depends	VBZ
on	IN
		
what	WP
kind	NN
of	IN
accuracy	NN
you	PRP
are	VBP
looking	VBG
for	IN
.	.
The	DT
fastest	JJS
		
pi	NN
I	PRP
know	VBP
of	IN
is	VBZ
the	DT
digits	NNS
hard	RB
coded	VBD
.	.
Looking	VBG
		
at	IN
Pi	NNP
and	CC
Pi	NNP
[PDF	NNP
]	NNP
,	,
there	EX
are	VBP
a	DT
lot	NN
		
of	IN
formulas	NNS
.	.
Here	RB
is	VBZ
a	DT
method	NN
that	WDT
converges	VBZ
quickly	RB
(	(
		
~14digits	NNS
per	IN
iteration	NN
)	)
.	.
The	DT
current	JJ
fastest	JJS
application	NN
,	,
PiFast	NNP
		
,	,
uses	VBZ
this	DT
formula	NN
with	IN
the	DT
FFT	NNP
.	.
I'll	NNP
just	RB
write	VB
		
the	DT
formula	NN
,	,
since	IN
the	DT
code	NN
is	VBZ
straight	JJ
forward	RB
.	.
This	DT
		
formula	NN
was	VBD
almost	RB
found	VBN
by	IN
Ramanujan	NNP
and	CC
discovered	VBN
by	IN
Chudnovsky	NNP
.	.
		
It	PRP
is	VBZ
actually	RB
how	WRB
he	PRP
calculated	VBD
several	JJ
billion	CD
digits	NNS
of	IN
the	DT
		
number	NN
--	:
so	IN
it	PRP
isn't	VBZ
a	DT
method	NN
to	TO
disregard	VB
.	.
The	DT
		
formula	NN
will	MD
overflow	VB
quickly	RB
since	IN
we	PRP
are	VBP
dividing	VBG
factorials	NNS
,	,
it	PRP
		
would	MD
be	VB
advantageous	JJ
then	RB
to	TO
delay	VB
such	JJ
calculating	VBG
to	TO
remove	VB
terms	NNS
		
.	.
where	WRB
,	,
Below	NNP
is	VBZ
the	DT
Brent	NNP
–Salamin	NNP
algorithm	NN
.	.
Wikipedia	NNP
		
mentions	NNS
that	WDT
when	WRB
a	DT
and	CC
b	NN
are	VBP
'	POS
close	JJ
enough	NNS
'	POS
		
then	RB
(	(
a	DT
+b	NN
)	)
^2	NN
/4t	NN
will	MD
be	VB
an	DT
approximation	NN
		
of	IN
pi	NN
.	.
I'm	NNP
not	RB
sure	JJ
what	WP
'	''
close	RB
enough	IN
'	''
		
means	NNS
,	,
but	CC
from	IN
my	PRP$
tests	NNS
,	,
one	CD
iteration	NN
got	VBD
2digits	CD
		
,	,
two	CD
got	VBD
7	CD
,	,
and	CC
three	CD
had	VBD
15	CD
,	,
of	IN
		
course	NN
this	DT
is	VBZ
with	IN
doubles	NNS
,	,
so	IN
it	PRP
might	MD
have	VB
error	NN
		
based	VBN
on	IN
its	PRP$
representation	NN
and	CC
the	DT
'	''
true	JJ
'	POS
calculation	NN
could	MD
		
be	VB
more	JJR
accurate	JJ
.	.
let	VB
pi_2	JJ
iters	NNS
=	VBP
let	VB
rec	VB
loop_	VB
		
a	DT
b	NN
t	NN
p	NN
i	NN
=	VBP
if	IN
i	JJ
=	VBP
0	CD
then	RB
		
a	DT
,	,
b	NN
,	,
t	NN
,	,
p	NN
else	RB
let	VB
a_n	JJ
=	NNP
		
(	(
a	DT
+	NN
.	.
b	NN
)	)
/	NN
.	.
2	CD
.	.
0	CD
		
and	CC
b_n	VB
=	NNP
sqrt	NN
(	(
a	DT
*	NN
.	.
b	NN
)	)
and	CC
		
p_n	JJ
=	NN
2	CD
.	.
0	CD
*	NN
.	.
p	NN
in	IN
let	NN
t_n	NN
		
=	NNP
t	NN
-.	NNP
(	(
p	JJ
*	NN
.	.
(	(
a	DT
-.	NNP
a_n	NN
		
)	)
*	NN
.	.
(	(
a	DT
-.	NNP
a_n	NN
)	)
)	)
in	IN
loop_	NN
		
a_n	NN
b_n	NN
t_n	NN
p_n	NN
(	(
i	JJ
-	:
1	CD
)	)
in	IN
let	NN
		
a	DT
,	,
b	NN
,	,
t	NN
,	,
p	NN
=	NNP
loop_	NN
(	(
1	CD
		
.	.
0	CD
)	)
(	(
1	CD
.	.
0	CD
/	NN
.	.
(	(
sqrt	JJ
		
2	CD
.	.
0	CD
)	)
)	)
(	(
1	CD
.	.
0	CD
/	NN
.	.
		
4	CD
.	.
0	CD
)	)
(	(
1	CD
.	.
0	CD
)	)
iters	NNS
in	IN
		
(	(
a	DT
+	NN
.	.
b	NN
)	)
*	NN
.	.
(	(
a	DT
+	NN
		
.	.
b	NN
)	)
/	NN
.	.
(	(
4	CD
.	.
0	CD
*	NN
.	.
		
t	NN
)	)
Lastly	RB
,	,
how	WRB
about	IN
some	DT
pi	JJ
golf	NN
(	(
800	CD
		
digits	NNS
)	)
?	.
160	CD
characters	NNS
!	.
int	NN
a	DT
=10000	NN
,	,
b	NN
		
,	,
c	NN
=2800	NN
,	,
d	NN
,	,
e	NN
,	,
f	JJ
[2801	NNP
]	NNP
		
,	,
g	NN
;main	NNP
(	(
)	)
{for	FW
(	(
;b	SYM
-	:
c	NN
;	:
		
)f	CC
[b	VB
+	JJ
+	NNP
]	NNP
=a	NNP
/5	NNP
;for	NNP
(	(
;d	NNP
=0	NNP
		
,	,
g	NN
=c	NNP
*2	NNP
;c	NNP
-	:
=14	NN
,	,
printf(	VB
"	CD
%	NN
		
.	.
4d	CD
"	NN
,	,
e	FW
+d	NNP
/a	NNP
)	)
,	,
e	JJ
=d	NNP
		
%a	NNP
)for	NNP
(	(
b	SYM
=c	NNP
;d	NNP
+	NNP
=f	NNP
[b	NNP
]	NNP
*a	NNP
		
,	,
f	JJ
[b	NNP
]	NNP
=d	NNP
%	NN
--	:
g	NN
,	,
d	NN
/	NNP
		
=g	NNP
--	:
,	,
--	:
b	SYM
;d	JJ
*	NNP
=b	NNP
)	)
;	:
}	)
		
A	NNP
few	JJ
things	NNS
:	:
You	PRP
are	VBP
creating	VBG
(	(
and	CC
not	RB
using	VBG
		
)	)
an	DT
unnecessary	JJ
toplevel	NN
window	NN
,	,
named	VBN
window	NN
.	.
You	PRP
can	MD
		
just	RB
delete	VB
these	DT
lines	NNS
:	:
window	NN
=	NN
gtk_window_new(	VBP
GTK_WINDOW_TOPLEVEL	NNP
)	)
;g_signal_connect	VBP
		
(	(
G_OBJECT(	NNP
window	NN
)	)
,	,
"delete_event	JJ
"	NN
,	,
G_CALLBACK(	NNP
delete_event	NN
)	)
		
,	,
NULL	NNP
)	)
;g_signal_connect	VBP
(	(
G_OBJECT(	NNP
window	NN
)	)
,	,
"destroy	NNP
"	NNP
		
,	,
G_CALLBACK(	NNP
destroy	NN
)	)
,	,
NULL	NNP
)	)
;	:
Also	RB
,	,
the	DT
		
flow	NN
doesn't	NN
seem	VBP
quite	RB
right	RB
.	.
gtk_main()	NN
starts	VBZ
the	DT
GTK	NNP
main	JJ
		
loop	NN
,	,
which	WDT
blocks	VBZ
until	IN
something	NN
exits	NNS
it	PRP
.	.
gtk_dialog_run()	NN
also	RB
		
starts	VBZ
a	DT
main	JJ
loop	NN
,	,
but	CC
it	PRP
exits	VBZ
as	RB
soon	RB
as	IN
		
one	CD
of	IN
the	DT
buttons	NNS
is	VBZ
clicked	VBN
.	.
I	PRP
think	VBP
it	PRP
might	MD
		
be	VB
enough	RB
for	IN
you	PRP
to	TO
remove	VB
the	DT
gtk_init_add()	NN
and	CC
gtk_main()	NN
calls	NNS
		
,	,
and	CC
simply	RB
deal	VB
with	IN
the	DT
return	NN
value	NN
.	.
Also	RB
the	DT
		
gtk_widget_destroy()	NN
call	NN
is	VBZ
unnecessary	JJ
,	,
as	IN
the	DT
dialog	NN
window	NN
is	VBZ
automatically	RB
		
destroyed	VBN
when	WRB
gtk_dialog_run()	JJ
returns	NNS
.	.
You	PRP
may	MD
also	RB
be	VB
interested	JJ
in	IN
		
the	DT
output	NN
of	IN
the	DT
explain()	NN
method	NN
,	,
and	CC
the	DT
resulting	JJ
Explanation	NNP
		
object	NN
,	,
which	WDT
will	MD
give	VB
you	PRP
an	DT
idea	NN
of	IN
how	WRB
things	NNS
		
are	VBP
scored	VBN
the	DT
way	NN
they	PRP
are	VBP
.	.
Well	NNP
,	,
in	IN
Java	NNP
		
an	DT
int	NN
is	VBZ
a	DT
primitive	JJ
while	IN
an	DT
Integer	NNP
is	VBZ
an	DT
Object	NNP
		
.	.
Meaning	NNP
,	,
if	IN
you	PRP
made	VBD
a	DT
new	JJ
Integer	NN
:	:
Integer	NN
		
i	VB
=	VBP
new	JJ
Integer(	NNP
6	CD
)	)
;	:
You	PRP
could	MD
call	VB
some	DT
		
method	NN
on	IN
i	NN
:	:
String	NN
s	NN
=	NNP
i.toString()	NN
;	:
/	CC
/sets	NNS
		
s	VBP
the	DT
string	NN
representation	NN
of	IN
i	JJ
Whereas	NNP
with	IN
an	DT
int	NN
:	:
		
int	NN
i	NN
=	VBP
6	CD
;	:
You	PRP
cannot	VBP
call	VB
any	DT
methods	NNS
on	IN
		
it	PRP
,	,
because	IN
it	PRP
is	VBZ
simply	RB
a	DT
primitive	NN
.	.
So	RB
:	:
		
String	VBG
s	NN
=	NNP
i.toString()	NN
;	:
/	NNP
/will	NNP
not	RB
work	NN
!	.
!	.
		
!	.
would	MD
produce	VB
an	DT
error	NN
,	,
because	IN
int	NN
is	VBZ
not	RB
an	DT
		
object	NN
.	.
int	NN
is	VBZ
one	CD
of	IN
the	DT
few	JJ
primitives	NNS
in	IN
Java	NNP
		
(	(
along	IN
with	IN
char	NN
and	CC
some	DT
others	NNS
)	)
.	.
I'm	NNP
not	RB
		
100	CD
%	NN
sure	JJ
,	,
but	CC
I'm	NNP
thinking	NN
that	IN
the	DT
Integer	NNP
object	VB
		
more	RBR
or	CC
less	RBR
just	RB
has	VBZ
an	DT
int	NN
property	NN
and	CC
a	DT
whole	JJ
		
bunch	NN
of	IN
methods	NNS
to	TO
interact	VB
with	IN
that	DT
property	NN
(	(
like	IN
the	DT
		
toString()	NN
method	NN
for	IN
example	NN
)	)
.	.
So	RB
Integer	NNP
is	VBZ
a	DT
fancy	JJ
		
way	NN
to	TO
work	VB
with	IN
an	DT
int	NN
(	(
Just	NNP
as	IN
perhaps	RB
String	NNP
		
is	VBZ
a	DT
fancy	JJ
way	NN
to	TO
work	VB
with	IN
a	DT
group	NN
of	IN
chars	NNS
		
)	)
.	.
I	PRP
know	VBP
that	IN
Java	NNP
isn't	NN
C	NNP
,	,
but	CC
since	IN
		
I've	NNP
never	RB
programmed	VBD
in	IN
C	NNP
this	DT
is	VBZ
the	DT
closest	JJS
I	PRP
could	MD
		
come	VB
to	TO
the	DT
answer	NN
.	.
Hope	VBP
this	DT
helps	NN
!	.
Integer	NNP
object	JJ
		
javadoc	NN
Integer	NNP
Ojbect	NNP
vs	NN
.	.
int	NN
primitive	JJ
comparison	NN
Interesting	NNP
question	NN
!	.
		
I	PRP
would	MD
do	VB
this	DT
by	IN
picking	VBG
combinations	NNS
,	,
something	NN
like	IN
the	DT
		
following	VBG
in	IN
python	NN
.	.
The	DT
hardest	JJS
part	NN
is	VBZ
probably	RB
first	JJ
pass	NN
		
verification	NN
,	,
i	NN
.	.
e	NN
.	.
if	IN
f(	JJ
1	CD
,	,
2	CD
		
,	,
3	CD
)	)
returns	NNS
true	JJ
,	,
is	VBZ
that	IN
a	DT
correct	JJ
result	NN
		
?	.
Once	RB
you	PRP
have	VBP
verified	VBN
that	IN
,	,
then	RB
this	DT
is	VBZ
a	DT
		
good	JJ
basis	NN
for	IN
regression	NN
testing	NN
.	.
Probably	RB
it's	VBZ
a	DT
good	JJ
idea	NN
		
to	TO
make	VB
a	DT
set	NN
of	IN
test	NN
cases	NNS
that	IN
you	PRP
know	VBP
will	MD
		
be	VB
all	DT
true	JJ
(	(
e	NN
.	.
g	NN
.	.
3	CD
,	,
4	CD
		
,	,
5	CD
for	IN
this	DT
triangle	JJ
case	NN
)	)
,	,
and	CC
a	DT
set	NN
		
of	IN
test	NN
cases	NNS
that	IN
you	PRP
know	VBP
will	MD
be	VB
all	DT
false	JJ
(	(
		
e	NN
.	.
g	NN
.	.
0	CD
,	,
1	CD
,	,
inf	NN
)	)
.	.
		
Then	RB
you	PRP
can	MD
more	VB
easily	RB
verify	VB
the	DT
tests	NNS
are	VBP
correct	JJ
.	.
		
#	#
xpermutations	NNS
from	IN
http	NN
:	:
/	JJ
/code	NN
.	.
activestate	NN
.	.
com	NN
		
/recipes	VBZ
/190465	CD
from	IN
xpermutations	NNS
import	VBP
*	JJ
lengths	NNS
=	VBP
[	SYM
-	:
1	CD
		
,	,
0	CD
,	,
1	CD
,	,
5	CD
,	,
10	CD
,	,
0	CD
,	,
		
1000	CD
,	,
'	''
inf	NN
'	POS
]	NN
for	IN
c	NN
in	IN
xselections(	JJ
lengths	NNS
		
,	,
3	CD
)	)
:	:
#	#
or	CC
xuniqueselections	NNS
print	VBP
c	JJ
(-	JJ
1	CD
		
,	,
-	:
1	CD
,	,
-	:
1	CD
)	)
;	:
(-	JJ
1	CD
,	,
		
-	:
1	CD
,	,
0	CD
)	)
;	:
(-	JJ
1	CD
,	,
-	:
1	CD
		
,	,
1	CD
)	)
;	:
(-	JJ
1	CD
,	,
-	:
1	CD
,	,
5	CD
		
)	)
;	:
(-	JJ
1	CD
,	,
-	:
1	CD
,	,
10	CD
)	)
;	:
		
(-	JJ
1	CD
,	,
-	:
1	CD
,	,
0	CD
)	)
;	:
(-	JJ
1	CD
		
,	,
-	:
1	CD
,	,
1000	CD
)	)
;	:
(-	JJ
1	CD
,	,
-	:
		
1	CD
,	,
inf	NN
)	)
;	:
(-	JJ
1	CD
,	,
0	CD
,	,
-	:
		
1	CD
)	)
;	:
(-	JJ
1	CD
,	,
0	CD
,	,
0	CD
)	)
;	:
		
...	:
There	EX
are	VBP
three	CD
ways	NNS
to	TO
iterate	VB
over	IN
a	DT
result	NN
set	VBN
		
.	.
The	DT
best	JJS
way	NN
in	IN
terms	NNS
of	IN
both	DT
readability	NN
and	CC
performance	NN
		
is	VBZ
usually	RB
to	TO
use	VB
the	DT
built-in	NN
cursor	NN
iterator	NN
.	.
curs.execute(	NN
'	''
		
select	JJ
*	NN
from	IN
people	NNS
'	POS
)	)
for	IN
row	NN
in	IN
curs	NNS
:	:
		
print	NN
row	NN
You	PRP
can	MD
fetch	VB
all	PDT
the	DT
rows	NNS
into	IN
a	DT
list	NN
		
,	,
but	CC
this	DT
can	MD
have	VB
some	DT
bad	JJ
side	NN
effects	NNS
if	IN
the	DT
		
result	NN
set	VBN
is	VBZ
large	JJ
.	.
You	PRP
have	VBP
to	TO
wait	VB
for	IN
the	DT
		
entire	JJ
result	NN
set	VBN
to	TO
be	VB
returned	VBN
to	TO
your	PRP$
client	NN
process	NN
.	.
		
You	PRP
may	MD
eat	VB
up	RP
a	DT
lot	NN
of	IN
memory	NN
in	IN
your	PRP$
client	NN
		
to	TO
hold	VB
the	DT
built-up	JJ
list	NN
.	.
It	PRP
may	MD
take	VB
a	DT
while	NN
		
for	IN
Python	NNP
to	TO
construct	VB
and	CC
deconstruct	VB
the	DT
list	NN
which	WDT
you	PRP
are	VBP
		
going	VBG
to	TO
immediately	RB
discard	VB
anyways	NNS
.	.
for	IN
row	NN
in	IN
curs.fetchall()	NN
:	:
		
print	NN
row	NN
Finally	RB
,	,
you	PRP
can	MD
loop	VB
over	IN
the	DT
result	NN
set	VBN
		
fetching	VBG
one	CD
row	NN
at	IN
a	DT
time	NN
.	.
In	IN
general	JJ
,	,
there's	JJ
		
no	DT
particular	JJ
advantage	NN
in	IN
doing	VBG
this	DT
over	IN
using	VBG
the	DT
iterator	NN
.	.
		
If	IN
there	EX
is	VBZ
something	NN
in	IN
your	PRP$
programming	NN
logic	NN
that	WDT
seems	VBZ
to	TO
		
indicate	VB
there	EX
is	VBZ
an	DT
advantage	NN
in	IN
doing	VBG
this	DT
,	,
perhaps	RB
you	PRP
		
should	MD
reconsider	VB
your	PRP$
programming	VBG
logic	NN
.	.
row	VB
=	JJ
curs.fetchone()	NN
while	IN
row	NN
		
:	:
print	NN
row	NN
row	NN
=	NNP
curs.fetchone()	NN
I'm	NNP
looking	VBG
for	IN
a	DT
performant	NN
		
,	,
reasonably	RB
robust	JJ
RNG	NNP
using	VBG
no	DT
special	JJ
hardware	NN
.	.
It	PRP
can	MD
		
use	VB
mathematical	JJ
methods	NNS
(	(
Mersenne	NNP
Twister	NNP
,	,
etc	NN
)	)
,	,
it	PRP
		
can	MD
"collect	VB
entropy	JJ
"	NN
from	IN
the	DT
machine	NN
,	,
whatever	WDT
.	.
On	IN
		
Linux	NNP
/etc	NNP
we	PRP
have	VBP
a	DT
drand48()	NN
which	WDT
generates	VBZ
48	CD
random	NN
bits	NNS
		
.	.
I'd	NNP
like	IN
a	DT
similar	JJ
function	NN
/class	NN
for	IN
C	NNP
+	NNP
+	NNP
		
or	CC
C	NNP
#	#
which	WDT
can	MD
generate	VB
more	JJR
than	IN
32	CD
bits	NNS
of	IN
		
randomness	NN
and	CC
which	WDT
low-order	NN
bits	NNS
are	VBP
equally	RB
as	RB
random	JJ
as	IN
high-order	NN
		
bits	NNS
.	.
It	PRP
doesn't	VBZ
have	VB
to	TO
be	VB
cryptographically	RB
secure	JJ
but	CC
it	PRP
		
must	MD
not	RB
use	VB
or	CC
be	VB
based	VBN
on	IN
the	DT
C-language	JJ
rand()	NN
or	CC
		
.	.
NET	JJ
System	NN
.	.
Random	NNP
.	.
Any	NNP
source	NN
code	NN
,	,
links	VBZ
		
to	TO
source	NN
,	,
etc	FW
.	.
would	MD
be	VB
appreciated	VBN
!	.
Failing	VBG
that	IN
		
,	,
what	WP
TYPE	NNP
of	IN
RNG	NNP
should	MD
I	PRP
be	VB
looking	VBG
for	IN
?	.
		
Hmm	NNP
,	,
ok	NN
.	.
I'd	NNP
suggest	VBP
code	NN
like	IN
this	DT
,	,
then	RB
		
:	:
typedef	VB
struct	NN
{	(
int	JJ
type	NN
;	:
int	JJ
result	NN
;	:
}	)
		
DialogData	NNP
;static	JJ
gbooleandisplay_dialog(	NN
gpointer	NN
user_data	NN
)	)
{	(
DialogData	NNP
*dialog_data	NNP
=	NNP
user_data	NN
		
;	:
GtkWidget	NNP
*dialog	NNP
;	:
if	IN
(	(
dialog_data	SYM
-	:
>type	NN
&	CC
MB_YESNO	NNP
		
)	)
dialog	NN
=	JJ
gtk_message_dialog_new(	NN
...	:
)	)
;	:
else	RB
dialog	NN
=	JJ
gtk_message_dialog_new(	NN
		
...	:
)	)
;	:
/	CC
/	VB
Set	NNP
title	NN
,	,
etc	FW
.	.
dialog_data	SYM
		
-	:
>result	NN
=	JJ
gtk_dialog_run(	NN
...	:
)	)
;	:
gtk_main_quit()	NN
;	:
/	CC
/	VB
		
Quits	VBZ
the	DT
main	JJ
loop	NN
run	NN
in	IN
MessageBox()	NNP
return	NN
FALSE	NNP
;	:
}int	NN
		
MessageBox(	NNP
...	:
)	)
{	(
DialogData	NNP
dialog_data	NN
;	:
dialog_data	NNS
.	.
type	NN
=	NN
		
type	NN
;	:
gtk_idle_add(	CC
display_dialog	NN
,	,
&dialog_data	NNP
)	)
;	:
gtk_main()	NN
;	:
/	CC
		
/	VB
Do	NNP
stuff	VB
based	VBN
on	IN
dialog_data	NN
.	.
result	NN
}	)
The	DT
struct	NN
		
is	VBZ
because	IN
you	PRP
need	VBP
to	TO
pass	VB
around	RP
a	DT
couple	NN
pieces	NNS
of	IN
		
data	NNS
.	.
The	DT
gtk_idle_add()	NN
call	NN
adds	VBZ
a	DT
method	NN
to	TO
be	VB
run	VBN
		
when	WRB
the	DT
main	JJ
loop	NN
is	VBZ
running	VBG
and	CC
idle	JJ
,	,
and	CC
the	DT
		
FALSE	NNP
return	NN
value	NN
from	IN
the	DT
display_dialog()	NN
call	NN
means	VBZ
that	IN
it's	VBG
only	RB
		
run	VB
once	RB
.	.
After	IN
we	PRP
get	VBP
the	DT
result	NN
from	IN
the	DT
dialog	NN
		
,	,
we	PRP
quit	VBP
the	DT
main	JJ
loop	NN
.	.
That'll	NNP
cause	VBP
the	DT
gtk_main()	NN
		
in	IN
your	PRP$
main	JJ
MessageBox()	NNP
method	NN
to	TO
return	VB
,	,
and	CC
you'll	RB
be	VB
		
able	JJ
to	TO
access	NN
the	DT
result	NN
from	IN
there	RB
.	.
Hope	VB
this	DT
helps	NN
		
!	.
I'll	NNP
add	VB
to	TO
the	DT
excellent	JJ
answers	NNS
given	VBN
above	IN
,	,
and	CC
		
talk	VB
about	IN
boxing	NN
and	CC
unboxing	NN
,	,
and	CC
how	WRB
this	DT
applies	VBZ
to	TO
		
Java	NNP
(	(
although	IN
C	NNP
#	#
has	VBZ
it	PRP
too	RB
)	)
.	.
I'll	NNP
		
use	NN
just	RB
Java	NNP
terminology	NN
,	,
because	IN
I	PRP
am	VBP
more	RBR
au	JJ
fait	NN
		
with	IN
that	DT
.	.
As	IN
the	DT
answers	NNS
mentioned	VBD
,	,
int	NN
is	VBZ
just	RB
		
a	DT
number	NN
(	(
called	VBN
the	DT
unboxed	JJ
type	NN
)	)
,	,
whereas	JJ
Integer	NNP
		
is	VBZ
an	DT
object	NN
(	(
which	WDT
contains	VBZ
the	DT
number	NN
,	,
hence	RB
a	DT
		
boxed	JJ
type	NN
)	)
.	.
In	IN
Java	NNP
terms	NNS
,	,
that	DT
means	VBZ
(	(
		
apart	RB
from	IN
not	RB
being	VBG
able	JJ
to	TO
call	VB
methods	NNS
on	IN
int	NN
)	)
		
,	,
you	PRP
cannot	VBP
store	VB
int	NN
or	CC
other	JJ
non-object	JJ
types	NNS
in	IN
collections	NNS
		
(	(
List	NNP
,	,
Map	NNP
,	,
etc	FW
.	.
)	)
.	.
In	IN
order	NN
		
to	TO
store	VB
them	PRP
,	,
you	PRP
must	MD
first	VB
box	VB
them	PRP
up	RP
in	IN
		
its	PRP$
corresponding	NN
boxed	JJ
type	NN
.	.
Java	NNP
5	CD
onwards	NNS
have	VBP
something	NN
called	VBN
		
auto-boxing	JJ
and	CC
auto-unboxing	JJ
which	WDT
allow	VBP
the	DT
boxing	NN
/unboxing	VBG
to	TO
be	VB
done	VBN
		
behind	IN
the	DT
scenes	NNS
.	.
Compare	NNP
and	CC
contrast	NN
:	:
Java	NNP
5	CD
version	NN
		
:	:
Deque	NNP
<Integer	NNP
>	NNP
queue	NN
;void	NNP
add(	NN
int	NN
n	NN
)	)
{	(
		
queue.add(	JJ
n	NN
)	)
;	:
}int	CC
remove()	VB
{	(
return	VB
queue.remove()	NN
;	:
}	)
		
Java	NNP
1	CD
.	.
4	CD
or	CC
earlier	JJR
(	(
no	DT
generics	NNS
either	CC
)	)
		
:	:
Deque	NNP
queue	VBZ
;void	JJ
add(	NN
int	NN
n	NN
)	)
{	(
queue.add(	JJ
Integer.valueOf(	NNP
		
n	NN
)	)
)	)
;	:
}int	CC
remove()	VB
{	(
return	VB
((	NNP
Integer	NNP
)	)
		
queue.remove()	NN
)	)
.	.
intValue()	NN
;	:
}	)
It	PRP
must	MD
be	VB
noted	VBN
that	IN
		
despite	IN
the	DT
brevity	NN
in	IN
the	DT
Java	NNP
5	CD
version	NN
,	,
both	DT
versions	NNS
		
generate	VBP
identical	JJ
bytecode	NN
.	.
Thus	RB
,	,
although	IN
auto-boxing	JJ
and	CC
auto-unboxing	JJ
is	VBZ
		
very	RB
convenient	JJ
because	IN
you	PRP
write	VBP
less	JJR
code	NN
,	,
these	DT
operations	NNS
do	VBP
		
happen	VB
behind	IN
the	DT
scenes	NNS
,	,
with	IN
the	DT
same	JJ
runtime	NN
costs	NNS
,	,
		
so	IN
you	PRP
still	RB
have	VBP
to	TO
be	VB
aware	JJ
of	IN
their	PRP$
existence	NN
.	.
		
Hope	VBP
this	DT
helps	NN
!	.
I'm	NNP
not	RB
a	DT
PHP	NNP
dev	NN
but	CC
Google	NNP
		
says	VBZ
that	IN
PHP	NNP
5	CD
+	NN
can	MD
instantiate	VB
COM	NNP
components	NNS
.	.
If	IN
		
you	PRP
can	MD
install	VB
Outlook	NNP
on	IN
a	DT
box	NN
you	PRP
could	MD
write	VB
a	DT
		
PHP	NNP
web	NN
service	NN
around	IN
the	DT
COM	NNP
component	NN
to	TO
handle	VB
the	DT
requests	NNS
		
you	PRP
need	VBP
.	.
$outlook	VB
=	JJ
COM(	NNP
"Outlook	NNP
.	.
Application	NNP
"	NNP
)	)
		
Outlook	NNP
API	NNP
referance	NN
I	PRP
found	VBD
this	DT
page	NN
which	WDT
shows	VBZ
what	WP
the	DT
		
difference	NN
between	IN
Proc	NNP
.	.
new	JJ
and	CC
lambda	JJ
are	VBP
.	.
According	VBG
to	TO
		
the	DT
page	NN
,	,
the	DT
only	JJ
difference	NN
is	VBZ
that	IN
a	DT
lambda	NN
is	VBZ
		
strict	JJ
about	IN
the	DT
number	NN
of	IN
arguments	NNS
it	PRP
accepts	VBZ
,	,
whereas	JJ
Proc	NNP
		
.	.
new	JJ
converts	NNS
missing	VBG
arguments	NNS
to	TO
nil	VB
.	.
Here	RB
is	VBZ
an	DT
		
example	NN
IRB	NNP
session	NN
illustrating	VBG
the	DT
difference	NN
:	:
irb(	NN
main	JJ
)	)
:001	FW
		
:0	FW
>	FW
l	NN
=	NNP
lambda	VBZ
{	(
|x	NN
,	,
y	CC
|	NNP
x	NNP
		
+	NNP
y	NN
}	)
=	NNP
>	NNP
#	#
<Proc	NNP
:0x00007fc605ec0748	NNP
@	NNP
(	(
irb	NN
		
)	)
:1	VBZ
>	JJ
irb(	NN
main	JJ
)	)
:002	FW
:0	FW
>	FW
p	FW
=	FW
		
Proc	NNP
.	.
new	JJ
{	(
|x	JJ
,	,
y	JJ
|	NNP
x	NNP
+	NNP
y	NN
		
}	)
=	NNP
>	NNP
#	#
<Proc	NNP
:0x00007fc605ea8698	NNP
@	NNP
(	(
irb	NN
)	)
:2	VBZ
		
>	JJ
irb(	NN
main	JJ
)	)
:003	FW
:0	FW
>	FW
l	NN
.	.
call	VB
"hello	JJ
		
"	NN
,	,
"world	NNP
"	NNP
=	NNP
>	NNP
"helloworld	NNP
"	NNP
irb(	NN
main	JJ
)	)
		
:004	FW
:0	FW
>	FW
p	NN
.	.
call	VB
"hello	JJ
"	NN
,	,
"world	NNP
"	NNP
		
=	NNP
>	NNP
"helloworld	NNP
"	NNP
irb(	NN
main	JJ
)	)
:005	FW
:0	FW
>	FW
l	NN
		
.	.
call	VB
"hello	JJ
"	JJ
ArgumentError	NN
:	:
wrong	JJ
number	NN
of	IN
arguments	NNS
(	(
		
1	CD
for	IN
2	CD
)	)
from	IN
(	(
irb	NN
)	)
:1	NN
from	IN
(	(
		
irb	NN
)	)
:5	VBZ
:in	JJ
`call	NN
'	''
from	IN
(	(
irb	NN
)	)
:5	NN
		
from	IN
:0	NNP
irb(	NN
main	JJ
)	)
:006	FW
:0	FW
>	FW
p	NN
.	.
call	VB
		
"hello	JJ
"	JJ
TypeError	NN
:	:
can't	NN
convert	VB
nil	NN
into	IN
String	VBG
from	IN
(	(
		
irb	NN
)	)
:2	VBZ
:in	JJ
`	``
+	NNS
'	''
from	IN
(	(
irb	NN
)	)
		
:2	NN
from	IN
(	(
irb	NN
)	)
:6	VBZ
:in	JJ
`call	NN
'	''
from	IN
(	(
		
irb	NN
)	)
:6	NN
from	IN
:0	VBG
The	DT
page	NN
also	RB
recommends	VBZ
using	VBG
lambda	JJ
		
unless	IN
you	PRP
specifically	RB
want	VBP
the	DT
error	NN
tolerant	JJ
behavior	NN
.	.
I	PRP
agree	VBP
		
with	IN
this	DT
sentiment	NN
.	.
Using	VBG
a	DT
lambda	NN
seems	VBZ
a	DT
tad	RB
more	RBR
		
concise	NN
,	,
and	CC
with	IN
such	JJ
an	DT
insignificant	JJ
difference	NN
,	,
it	PRP
seems	VBZ
		
the	DT
better	JJR
choice	NN
in	IN
the	DT
average	JJ
situation	NN
.	.
As	IN
for	IN
Ruby	NNP
		
1	CD
.	.
9	CD
,	,
sorry	NN
,	,
I	PRP
haven't	VBP
looked	VBD
into	IN
1	CD
		
.	.
9	CD
yet	RB
,	,
but	CC
I	PRP
don't	VBP
imagine	JJ
they	PRP
would	MD
change	VB
		
it	PRP
all	PDT
that	RB
much	JJ
(	(
don't	JJ
take	VB
my	PRP$
word	NN
for	IN
it	PRP
		
though	IN
,	,
it	PRP
seems	VBZ
you	PRP
have	VBP
heard	VBN
of	IN
some	DT
changes	NNS
,	,
		
so	IN
I	PRP
am	VBP
probably	RB
wrong	JJ
there	RB
)	)
.	.

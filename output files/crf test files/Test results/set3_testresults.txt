High	JJ	O
Resolution	NNP	O
,	,	O
Low	NNP	O
Overhead	NNP	O
Timing	NNP	O
for	IN	O
Intel	NNP	O
Processors	NNPS	O
If	IN	O
you're	VBN	O

on	IN	O
Intel	NNP	O
hardware	NN	O
,	,	O
here's	VB	O
how	WRB	O
to	TO	O
read	VB	O
the	DT	O
CPU	NNP	O
real-time	JJ	O

instruction	NN	O
counter	NN	O
.	.	O
It	PRP	O
will	MD	O
tell	VB	O
you	PRP	O
the	DT	O
number	NN	O
of	IN	O
CPU	NNP	O

cycles	NNS	O
executed	VBD	O
since	IN	O
the	DT	O
processor	NN	O
was	VBD	O
booted	VBN	O
.	.	O
This	DT	O
is	VBZ	O
probably	RB	O

the	DT	O
finest-grained	JJ	O
counter	NN	O
you	PRP	O
can	MD	O
get	VB	O
for	IN	O
performance	NN	O
measurement	NN	O
.	.	O
Note	NN	O

that	IN	O
this	DT	O
is	VBZ	O
the	DT	O
number	NN	O
of	IN	O
CPU	NNP	O
cycles	NNS	O
.	.	O
On	IN	O
linux	IN	O

you	PRP	O
can	MD	O
get	VB	O
the	DT	O
CPU	NNP	O
speed	NN	O
from	IN	O
/proc	NNP	O
/cpuinfo	NNP	O
and	CC	O
divide	VB	O

to	TO	O
get	VB	O
the	DT	O
number	NN	O
of	IN	O
seconds	NNS	O
.	.	O
Converting	VBG	O
this	DT	O
to	TO	O
a	DT	O

double	NN	O
is	VBZ	O
quite	RB	O
handy	JJ	O
.	.	O
When	WRB	O
I	PRP	O
run	VBP	O
this	DT	O
on	IN	O
my	PRP$	O

box	NN	O
,	,	O
I	PRP	O
get	VBP	O
11867927879484732	CD	O
11867927879692217	CD	O
it	PRP	O
took	VBD	O
this	DT	O
long	JJ	O
to	TO	O

call	VB	O
printf	NN	O
:	:	O
207485	CD	O
Here's	NNP	O
the	DT	O
Intel	NNP	O
developer's	NN	O
guide	NN	O
that	WDT	O
gives	VBZ	O

tons	NNS	O
of	IN	O
detail	NN	O
.	.	O
#include	JJ	O
<stdio	NN	O
.	.	O
h	NN	O
>	JJ	O
#include	NNP	O
<stdint	NNP	O

.	.	O
h	NN	O
>	JJ	O
inline	NN	O
uint64_t	JJ	O
rdtsc()	NN	O
{	(	O
uint32_t	JJ	O
lo	NN	O
,	,	O
hi	NN	O

;	:	O
__asm__	CC	O
__volatile__	NNP	O
(	(	O
"xorl	CD	O
%	NN	O
%eax	NNP	O
,	,	O
%	NN	O
%eax	NNP	O
\n	NNP	O

"	NNP	I-API
"cpuid	NNP	I-API
\n	NNP	I-API
"	NNP	I-API
"rdtsc	NNP	I-API
\n	NNP	I-API
"	NN	I-API
:	:	I-API
"	JJ	I-API
=a	NN	I-API
"	NNP	I-API

(	(	O
lo	NN	O
)	)	O
,	,	O
"	JJ	O
=d	NN	O
"	NNP	O
(	(	O
hi	NN	O
)	)	O
:	:	O

:	:	O
"	NN	B-API
%ebx	NNP	I-API
"	NNP	I-API
,	,	I-API
"	NNP	I-API
%ecx	NNP	I-API
"	NNP	I-API
)	)	L-API
;	:	O
return	NN	O

(	(	O
uint64_t	JJ	O
)hi	NNP	O
<	NNP	O
<	VBD	O
32	CD	O
|	NNP	O
lo	NN	O
;	:	O
}	)	O
main()	FW	O

{	(	O
unsigned	JJ	O
long	RB	O
long	RB	O
x	RB	O
;	:	O
unsigned	JJ	O
long	RB	O
long	RB	O
y	RB	O
;	:	O

x	NNP	O
=	NNP	O
rdtsc()	NN	U-API
;	:	O
printf(	CC	O
"	VB	O
%lld	JJ	O
\n	NNP	O
"	NNP	O
,	,	O
x	NNP	O

)	)	L-API
;	:	O
y	CC	O
=	NNP	O
rdtsc()	VBP	O
;	:	O
printf(	CC	O
"	VB	O
%lld	JJ	O
\n	NNP	O
"	NNP	O

,	,	I-API
y	NN	I-API
)	)	L-API
;	:	O
printf(	CC	O
"it	VB	O
took	VBD	O
this	DT	O
long	JJ	O
to	TO	O
call	VB	O

printf	NN	O
:	:	O
%lld	JJ	B-API
\n	NNP	I-API
"	NNP	I-API
,	,	I-API
y-x	NN	I-API
)	)	L-API
;	:	O
}	)	O
Personally	NNP	O

I	PRP	O
would	MD	O
do	VB	O
something	NN	O
like	IN	O
this	DT	O
:	:	O
<	NN	O
?php	NNP	O
$data	NNP	O
=	NNP	O

array(	IN	O
$rating	VBG	O
[0	JJ	O
]	NNP	O
=	NNP	O
>	NNP	O
array(	NN	B-API
'	''	I-API
word0	NN	I-API
'	''	I-API
,	,	I-API

'	''	I-API
word1	NN	I-API
'	''	I-API
,	,	I-API
'	''	I-API
word2	NN	I-API
'	''	I-API
)	)	L-API
,	,	O
$rating	VBG	O
[1	JJ	O

]	NNP	O
=	NNP	O
>	NNP	O
array(	NN	B-API
'	''	I-API
word3	NN	I-API
'	''	I-API
,	,	I-API
'	''	I-API
word4	NN	I-API
'	''	I-API

,	,	I-API
'	''	I-API
word8	NN	I-API
'	''	I-API
,	,	I-API
...	:	I-API
)	)	L-API
)	)	O
;	:	O
/	CC	O
/assums	NNS	O

that	IN	O
$rating	VBG	O
is	VBZ	O
an	DT	O
array	NN	O
with	IN	O
the	DT	O
weight	NN	O
of	IN	O
each	DT	O
word	NN	O

so	IN	O
the	DT	O
more	JJR	O
popular	JJ	O
words	NNS	O
would	MD	O
have	VB	O
a	DT	O
higher	JJR	O
value	NN	O
in	IN	O

rating	NN	B-API
usort(	JJ	I-API
$data	NNP	I-API
)	)	L-API
;	:	O
/	CC	O
/sort	VB	O
the	DT	O
$data	NNP	O
variable	NN	O
,	,	O

this	DT	O
should	MD	O
give	VB	O
us	PRP	O
the	DT	O
most	RBS	O
popular	JJ	O
words	NNS	O
first	RB	O
$size	VB	O
=	NNP	O

'	POS	O
1	CD	O
'	POS	O
;	:	O
foreach(	NNS	O
$data	VBP	O
as	IN	O
$rank	NN	O
)	)	O
{	(	O
$i	JJ	O

=0	NN	O
;	:	O
while(	CC	O
$i	VB	O
<	JJ	O
$count	NNP	B-API
(	(	I-API
$rank	NNP	I-API
)	)	L-API
)	)	O
{	(	O

echo	JJ	O
"	NN	O
<h	NNP	O
"	NNP	O
.	.	O
$size	VB	O
.	.	O
"	VB	O
>	JJ	O
"	NNP	O
.	.	O

$rank	NN	O
[	JJ	O
$i	NNP	O
]	NNP	O
.	.	O
"	VB	O
<	JJ	O
/h	NNP	O
"	NNP	O
.	.	O
$size	VB	O

.	.	O
"	VB	O
>	JJ	O
"	NNP	O
;	:	O
$i	NNP	O
+	NNP	O
+	NNP	O
;	:	O
}	)	O
$size	VB	O

+	JJ	O
+	NN	O
;	:	O
}	)	O
?	.	O
>	JJ	O
Assuming	NNP	O
I'm	NNP	O
not	RB	O
a	DT	O
complete	JJ	O

idiot	NN	O
this	DT	O
should	MD	O
work	VB	O
.	.	O
But	CC	O
it	PRP	O
is	VBZ	O
untested	JJ	O
.	.	O
What	WP	O

is	VBZ	O
the	DT	O
meaning	NN	O
of	IN	O
the	DT	O
Java	NNP	O
warning	NN	O
?	.	O
Type	NNP	O
safety	NN	O
:	:	O

The	DT	O
cast	NN	O
from	IN	O
Object	NNP	O
to	TO	O
List	NNP	O
is	VBZ	O
actually	RB	O
checking	VBG	O
against	IN	O
the	DT	O

erased	JJ	O
type	NN	O
List	NN	O
I	PRP	O
get	VBP	O
this	DT	O
warning	NN	O
when	WRB	O
I	PRP	O
try	VBP	O
to	TO	O

cast	VB	O
an	DT	O
Object	NNP	O
to	TO	O
a	DT	O
type	NN	O
with	IN	O
generic	JJ	O
information	NN	O
,	,	O
such	JJ	O

as	IN	O
in	IN	O
the	DT	O
following	JJ	O
code	NN	O
:	:	O
Object	JJ	O
object	NN	O
=	NNP	O
getMyList()	NN	U-API
;	:	O

List	NNP	O
<Integer	NNP	O
>	NNP	O
list	NN	O
=	NNP	O
(	(	O
List	NNP	O
<Integer	NNP	O
>	NNP	O
)	)	O
object	VBP	O

;	:	O
I'm	NNP	O
not	RB	O
sure	JJ	O
why	WRB	O
you	PRP	O
would	MD	O
want	VB	O
to	TO	O
do	VB	O
this	DT	O

in	IN	O
the	DT	O
first	JJ	O
place	NN	O
.	.	O
The	DT	O
resulting	VBG	O
set	NN	O
for	IN	O
any	DT	O
moderately	RB	O

large	JJ	O
values	NNS	O
of	IN	O
x	NN	O
and	CC	O
y	NN	O
will	MD	O
be	VB	O
huge	JJ	O
,	,	O
and	CC	O

will	MD	O
grow	VB	O
exponentially	RB	O
as	IN	O
x	NN	O
and	CC	O
/or	NNP	O
y	NNP	O
get	VB	O
bigger	JJR	O
.	.	O

Lets	NNS	O
say	VBP	O
your	PRP$	O
set	NN	O
of	IN	O
possible	JJ	O
characters	NNS	O
is	VBZ	O
the	DT	O
26	CD	O
lowercase	NN	O

letters	NNS	O
of	IN	O
the	DT	O
alphabet	NN	O
,	,	O
and	CC	O
you	PRP	O
ask	VBP	O
your	PRP$	O
application	NN	O
to	TO	O

generate	VB	O
all	DT	O
permutations	NNS	O
where	WRB	O
length	NN	O
=	VBZ	O
5	CD	O
.	.	O
Assuming	VBG	O
you	PRP	O
don't	VBP	O

run	VB	O
out	IN	O
of	IN	O
memory	NN	O
you'll	NN	O
get	VB	O
11	CD	O
,	,	O
881	CD	O
,	,	O
376	CD	O

(	(	O
i	NN	O
.	.	O
e	NN	O
.	.	O
26	CD	O
to	TO	O
the	DT	O
power	NN	O
of	IN	O
5	CD	O

)	)	O
strings	NNS	O
back	RB	O
.	.	O
Bump	NN	O
that	WDT	O
length	VBZ	O
up	IN	O
to	TO	O
6	CD	O
,	,	O

and	CC	O
you'll	RB	O
get	VB	O
308	CD	O
,	,	O
915	CD	O
,	,	O
776	CD	O
strings	NNS	O
back	RB	O
.	.	O

These	DT	O
numbers	NNS	O
get	VBP	O
painfully	RB	O
large	JJ	O
,	,	O
very	RB	O
quickly	RB	O
.	.	O
Here's	VB	O
a	DT	O

solution	NN	O
I	PRP	O
put	VBP	O
together	RB	O
in	IN	O
Java	NNP	O
.	.	O
You'll	NNP	O
need	VBP	O
to	TO	O
provide	VB	O

two	CD	O
runtime	JJ	O
arguments	NNS	O
(	(	O
corresponding	VBG	O
to	TO	O
x	VB	O
and	CC	O
y	VB	O
)	)	O
.	.	O

Have	VBP	O
fun	VBN	O
.	.	O
public	JJ	O
class	NN	O
GeneratePermutations	NNP	O
{	(	O
public	JJ	O
static	JJ	O
void	NN	O
main(	NN	O

String	NNP	I-API
[	NNP	I-API
]	NNP	I-API
args	NN	I-API
)	)	L-API
{	(	O
int	NN	O
lower	RBR	O
=	NNP	O
Integer.parseInt(	NNP	O
args	VBZ	O

[0	NNP	I-API
]	NNP	I-API
)	)	L-API
;	:	O
int	JJ	O
upper	JJ	O
=	NN	O
Integer.parseInt(	NNP	O
args	VBZ	O
[1	NNP	O
]	NNP	O

)	)	L-API
;	:	O
if	IN	O
(	(	O
upper	JJ	O
<	NNP	O
lower	JJR	O
|	NNP	O
|	NNP	O
upper	JJ	O
=	NNP	O

=	NNP	O
0	CD	O
|	NNP	O
|	NNP	O
lower	JJR	O
=	NNP	O
=	NNP	O
0	CD	O
)	)	O
{	(	O
System.exit(	NNP	O

0	CD	O
)	)	O
;	:	O
}	)	O
for	IN	O
(	(	O
int	JJ	O
length	NN	O
=	NNP	O
lower	JJR	O
;	:	O

length	NN	O
<	NNP	O
=	NNP	O
upper	IN	O
;	:	O
length	CC	O
+	NNP	O
+	NNP	O
)	)	O
{	(	O
generate(	JJ	O

length	NN	I-API
,	,	I-API
"	NNP	I-API
"	NNP	I-API
)	)	L-API
;	:	O
}	)	O
}	)	O
private	JJ	O
static	JJ	O
void	NN	O

generate(	NN	B-API
int	NN	I-API
length	NN	I-API
,	,	I-API
String	NNP	I-API
partial	NN	I-API
)	)	L-API
{	(	O
if	IN	O
(	(	O
length	FW	O

<	NNP	O
=	NNP	O
0	CD	O
)	)	O
{	(	O
System.out.println(	NNP	B-API
partial	JJ	I-API
)	)	L-API
;	:	O
}	)	O
else	RB	O

{	(	O
for	IN	O
(	(	O
char	JJ	O
c	NN	O
=	NNP	O
'	POS	O
a	DT	O
'	POS	O
;	:	O
c	NNS	O

<	VBP	O
=	NNP	O
'	POS	O
z	NN	O
'	''	O
;	:	O
c	VB	O
+	NNP	O
+	NNP	O
)	)	O
{	(	O

generate(	JJ	B-API
length	NN	I-API
-	:	I-API
1	CD	I-API
,	,	I-API
partial	JJ	I-API
+	NNP	I-API
c	NN	I-API
)	)	L-API
;	:	O
}	)	O

}	)	O
}	)	O
}	)	O
The	DT	O
scoring	NN	O
contains	VBZ	O
the	DT	O
Inverse	NNP	O
Document	NNP	O
Frequency(	NNP	O
IDF	NNP	O

)	)	O
.	.	O
If	IN	O
the	DT	O
term	NN	O
"John	NNP	O
Smith	NNP	O
"	NNP	O
is	VBZ	O
in	IN	O
one	CD	O

partition	NN	O
,	,	O
0	CD	O
,	,	O
100	CD	O
times	NNS	O
and	CC	O
in	IN	O
partition	NN	O
1	CD	O
,	,	O

once	RB	O
.	.	O
The	DT	O
score	NN	O
for	IN	O
searching	VBG	O
for	IN	O
John	NNP	O
Smith	NNP	O
would	MD	O
be	VB	O

higher	JJR	O
search	NN	O
in	IN	O
partition	NN	O
1	CD	O
as	IN	O
the	DT	O
term	NN	O
is	VBZ	O
more	RBR	O
scarce	JJ	O

.	.	O
To	TO	O
get	VB	O
round	VB	O
this	DT	O
you	PRP	O
would	MD	O
wither	RB	O
have	VB	O
to	TO	O
have	VB	O

your	PRP$	O
index	NN	O
being	VBG	O
over	IN	O
all	DT	O
partitions	NNS	O
,	,	O
or	CC	O
you	PRP	O
would	MD	O
need	VB	O

to	TO	O
override	VB	O
the	DT	O
IDF	NNP	O
.	.	O
Part	NN	O
of	IN	O
my	PRP$	O
everyday	JJ	O
work	NN	O
is	VBZ	O

maintaining	VBG	O
and	CC	O
extending	VBG	O
legacy	NN	O
VB6	NNP	O
applications	NNS	O
.	.	O
A	DT	O
common	JJ	O
engine	NN	O
is	VBZ	O

written	VBN	O
in	IN	O
C	NNP	O
/C	NNP	O
+	NNP	O
+	NNP	O
and	CC	O
VB6	NNP	O
uses	VBZ	O
these	DT	O
functions	NNS	O

in	IN	O
order	NN	O
to	TO	O
improve	VB	O
performance	NN	O
.	.	O
When	WRB	O
it	PRP	O
comes	VBZ	O
to	TO	O
asynchronous	JJ	O

programming	NN	O
,	,	O
a	DT	O
C	NNP	O
interface	NN	O
is	VBZ	O
not	RB	O
enough	JJ	O
and	CC	O
we	PRP	O
rely	VBP	O

on	IN	O
COM	NNP	O
controls	VBZ	O
to	TO	O
fire	VB	O
events	NNS	O
to	TO	O
VB6	NNP	O
.	.	O
My	PRP$	O
problem	NN	O

is	VBZ	O
that	IN	O
when	WRB	O
I	PRP	O
register	VBP	O
the	DT	O
control	NN	O
in	IN	O
VB6	NNP	O
,	,	O
VB	NNP	O

loads	VBZ	O
this	DT	O
control	NN	O
in	IN	O
memory	NN	O
and	CC	O
does	VBZ	O
not	RB	O
unload	VB	O
it	PRP	O
until	IN	O

I	PRP	O
quit	VBP	O
the	DT	O
VB6	NNP	O
IDE	NNP	O
.	.	O
As	IN	O
the	DT	O
control	NN	O
is	VBZ	O
loaded	VBN	O

the	DT	O
whole	JJ	O
time	NN	O
,	,	O
I	PRP	O
am	VBP	O
unable	JJ	O
to	TO	O
recompile	VB	O
it	PRP	O
in	IN	O

VC6	NNP	O
,	,	O
because	IN	O
the	DT	O
DLL	NNP	O
file	NN	O
is	VBZ	O
locked	VBN	O
.	.	O
A	DT	O
solution	NN	O

I	PRP	O
found	VBD	O
is	VBZ	O
not	RB	O
to	TO	O
enable	VB	O
the	DT	O
control	NN	O
in	IN	O
VB	NNP	O
but	CC	O

use	VBP	O
the	DT	O
CreateObject()	NNP	O
with	IN	O
the	DT	O
full	JJ	O
name	NN	O
of	IN	O
my	PRP$	O
control	NN	O
.	.	O

The	DT	O
problem	NN	O
then	RB	O
is	VBZ	O
that	IN	O
I	PRP	O
must	MD	O
declare	VB	O
my	PRP$	O
control	NN	O
as	IN	O

an	DT	O
Object	NNP	O
because	IN	O
VB6	NNP	O
knows	VBZ	O
nothing	NN	O
of	IN	O
the	DT	O
interface	NN	O
I	PRP	O
am	VBP	O

using	VBG	O
and	CC	O
I	PRP	O
do	VBP	O
not	RB	O
have	VB	O
access	NN	O
to	TO	O
IntelliSense	NNP	O
,	,	O
which	WDT	O

is	VBZ	O
a	DT	O
pain	NN	O
.	.	O
Any	DT	O
idea	NN	O
how	WRB	O
I	PRP	O
can	MD	O
tell	VB	O
VB6	NNP	O

to	TO	O
unload	VB	O
controls	NNS	O
after	IN	O
quitting	VBG	O
the	DT	O
application	NN	O
?	.	O
Or	CC	O
directly	RB	O
in	IN	O

the	DT	O
IDE	NNP	O
?	.	O
Ok	NNP	O
,	,	O
I'm	NNP	O
a	DT	O
web	NN	O
developer	NN	O
,	,	O
but	CC	O

I	PRP	O
find	VBP	O
myself	PRP	O
dabbling	VBG	O
in	IN	O
windows	NNS	O
forms	NNS	O
projects	NNS	O
every	DT	O
now	RB	O
and	CC	O

then	RB	O
.	.	O
One	CD	O
thing	NN	O
that	WDT	O
confounds	VBZ	O
me	PRP	O
to	TO	O
this	DT	O
day	NN	O
is	VBZ	O

the	DT	O
following	VBG	O
.	.	O
Assume	NNP	O
you	PRP	O
are	VBP	O
doing	VBG	O
something	NN	O
like	IN	O
the	DT	O
following	JJ	O

List	NN	O
<string	VBG	O
>	JJ	O
myitems	NNS	O
=	VBP	O
new	JJ	O
List	NNP	O
<string	NNP	O
>	NNP	O
{	(	O
"Item	NN	O

1	CD	O
"	NN	O
,	,	O
"Item	VBP	O
2	CD	O
"	NN	O
,	,	O
"Item	VBP	O
3	CD	O
"	JJ	O
}	)	O

;	:	O
ComboBox	NNP	O
box	NN	O
=	NNP	O
new	JJ	O
ComboBox()	NNP	U-API
;	:	O
box	NN	O
.	.	O
DataSource	NNP	O
=	JJ	O

myitems	NNS	O
;	:	O
ComboBox	NNP	O
box2	VBZ	O
=	NNP	O
new	JJ	O
ComboBox()	NNP	U-API
;	:	O
box2	NN	O
.	.	O
DataSource	NNP	O

=	JJ	O
myitems	NNS	O
So	RB	O
now	RB	O
we	PRP	O
have	VBP	O
2	CD	O
combo	JJ	O
boxes	NNS	O
bound	VBD	O
to	TO	O

that	DT	O
array	NN	O
,	,	O
and	CC	O
everything	NN	O
works	NNS	O
fine	VBP	O
.	.	O
But	CC	O
when	WRB	O
you	PRP	O

change	VBP	O
the	DT	O
value	NN	O
of	IN	O
one	CD	O
combo	NN	O
box	NN	O
,	,	O
it	PRP	O
changes	VBZ	O
BOTH	NNP	O

combo	NN	O
boxes	NNS	O
to	TO	O
the	DT	O
one	CD	O
you	PRP	O
just	RB	O
selected	VBN	O
.	.	O
Now	RB	O
,	,	O

I	PRP	O
know	VBP	O
that	DT	O
Arrays	NNS	O
are	VBP	O
always	RB	O
passed	VBN	O
by	IN	O
reference	NN	O
(	(	O
learned	VBN	O

that	IN	O
when	WRB	O
i	NN	O
learned	VBD	O
C	NNP	O
:D	NNP	O
)	)	O
,	,	O
but	CC	O
why	WRB	O
on	IN	O

earth	NN	O
would	MD	O
the	DT	O
combo	JJ	O
boxes	NNS	O
change	VBP	O
together	RB	O
?	.	O
I	PRP	O
don't	VBP	O
believe	VB	O

the	DT	O
combo	NN	O
box	NN	O
control	NN	O
is	VBZ	O
modifying	VBG	O
the	DT	O
collection	NN	O
at	IN	O
all	DT	O
.	.	O

As	IN	O
a	DT	O
work	NN	O
around	RB	O
,	,	O
don't	NN	O
this	DT	O
would	MD	O
achieve	VB	O
the	DT	O
funcionality	NN	O

that	WDT	O
is	VBZ	O
expected	VBN	O
/	RB	O
desired	VBN	O
ComboBox	NNP	O
box	NN	O
=	NNP	O
new	JJ	O
ComboBox()	NNP	U-API
;	:	O

box	NN	O
.	.	O
DataSource	NNP	O
=	NNP	O
myitems.ToArray()	NN	U-API
;	:	O
So	CC	O
it	PRP	O
says	VBZ	O
microseconds	VBZ	O
explicitly	RB	O

,	,	O
but	CC	O
says	VBZ	O
the	DT	O
resolution	NN	O
of	IN	O
the	DT	O
system	NN	O
clock	NN	O
is	VBZ	O
unspecified	JJ	O

.	.	O
I	PRP	O
suppose	VBP	O
resolution	NN	O
in	IN	O
this	DT	O
context	NN	O
means	VBZ	O
how	WRB	O
the	DT	O
smallest	JJS	O

amount	NN	O
it	PRP	O
will	MD	O
ever	RB	O
be	VB	O
incremented	VBN	O
?	.	O
The	DT	O
data	NN	O
structure	NN	O
is	VBZ	O

defined	VBN	O
as	IN	O
having	VBG	O
microseconds	NNS	O
as	IN	O
a	DT	O
unit	NN	O
of	IN	O
measurement	NN	O
,	,	O
but	CC	O

that	IN	O
doesn't	JJ	O
mean	VB	O
that	IN	O
the	DT	O
clock	NN	O
or	CC	O
operating	NN	O
system	NN	O
is	VBZ	O
actually	RB	O

capable	JJ	O
of	IN	O
measuring	VBG	O
that	DT	O
finely	RB	O
.	.	O
Like	IN	O
other	JJ	O
people	NNS	O
have	VBP	O
suggested	VBN	O

,	,	O
gettimeofday()	NN	O
is	VBZ	O
bad	JJ	O
because	IN	O
setting	VBG	O
the	DT	O
time	NN	O
can	MD	O
cause	VB	O
clock	NN	O

skew	NN	O
and	CC	O
throw	VB	O
off	RP	O
your	PRP$	O
calculation	NN	O
.	.	O
clock_gettime(	VB	O
CLOCK_MONOTONIC	NNP	O
)	)	O
is	VBZ	O

what	WP	O
you	PRP	O
want	VBP	O
,	,	O
and	CC	O
clock_getres()	NN	O
will	MD	O
tell	VB	O
you	PRP	O
the	DT	O
precision	NN	O

of	IN	O
your	PRP$	O
clock	NN	O
.	.	O
The	DT	O
Monte	NNP	O
Carlo	NNP	O
method	NN	O
,	,	O
as	IN	O
mentioned	VBN	O

,	,	O
applies	VBZ	O
some	DT	O
great	JJ	O
concepts	NNS	O
but	CC	O
it	PRP	O
is	VBZ	O
,	,	O
clearly	RB	O
,	,	O

not	RB	O
the	DT	O
fastest	JJS	O
--	:	O
not	RB	O
by	IN	O
a	DT	O
long	JJ	O
shot	NN	O
,	,	O
not	RB	O

by	IN	O
any	DT	O
reasonable	JJ	O
usefulness	NN	O
.	.	O
Also	RB	O
,	,	O
it	PRP	O
all	DT	O
depends	VBZ	O
on	IN	O

what	WP	O
kind	NN	O
of	IN	O
accuracy	NN	O
you	PRP	O
are	VBP	O
looking	VBG	O
for	IN	O
.	.	O
The	DT	O
fastest	JJS	O

pi	NN	O
I	PRP	O
know	VBP	O
of	IN	O
is	VBZ	O
the	DT	O
digits	NNS	O
hard	RB	O
coded	VBD	O
.	.	O
Looking	VBG	O

at	IN	O
Pi	NNP	O
and	CC	O
Pi	NNP	O
[PDF	NNP	O
]	NNP	O
,	,	O
there	EX	O
are	VBP	O
a	DT	O
lot	NN	O

of	IN	O
formulas	NNS	O
.	.	O
Here	RB	O
is	VBZ	O
a	DT	O
method	NN	O
that	WDT	O
converges	VBZ	O
quickly	RB	O
(	(	O

~14digits	NNS	O
per	IN	O
iteration	NN	O
)	)	O
.	.	O
The	DT	O
current	JJ	O
fastest	JJS	O
application	NN	O
,	,	O
PiFast	NNP	O

,	,	O
uses	VBZ	O
this	DT	O
formula	NN	O
with	IN	O
the	DT	O
FFT	NNP	O
.	.	O
I'll	NNP	O
just	RB	O
write	VB	O

the	DT	O
formula	NN	O
,	,	O
since	IN	O
the	DT	O
code	NN	O
is	VBZ	O
straight	JJ	O
forward	RB	O
.	.	O
This	DT	O

formula	NN	O
was	VBD	O
almost	RB	O
found	VBN	O
by	IN	O
Ramanujan	NNP	O
and	CC	O
discovered	VBN	O
by	IN	O
Chudnovsky	NNP	O
.	.	O

It	PRP	O
is	VBZ	O
actually	RB	O
how	WRB	O
he	PRP	O
calculated	VBD	O
several	JJ	O
billion	CD	O
digits	NNS	O
of	IN	O
the	DT	O

number	NN	O
--	:	O
so	IN	O
it	PRP	O
isn't	VBZ	O
a	DT	O
method	NN	O
to	TO	O
disregard	VB	O
.	.	O
The	DT	O

formula	NN	O
will	MD	O
overflow	VB	O
quickly	RB	O
since	IN	O
we	PRP	O
are	VBP	O
dividing	VBG	O
factorials	NNS	O
,	,	O
it	PRP	O

would	MD	O
be	VB	O
advantageous	JJ	O
then	RB	O
to	TO	O
delay	VB	O
such	JJ	O
calculating	VBG	O
to	TO	O
remove	VB	O
terms	NNS	O

.	.	O
where	WRB	O
,	,	O
Below	NNP	O
is	VBZ	O
the	DT	O
Brent	NNP	O
–Salamin	NNP	O
algorithm	NN	O
.	.	O
Wikipedia	NNP	O

mentions	NNS	O
that	WDT	O
when	WRB	O
a	DT	O
and	CC	O
b	NN	O
are	VBP	O
'	POS	O
close	JJ	O
enough	NNS	O
'	POS	O

then	RB	O
(	(	O
a	DT	O
+b	NN	O
)	)	O
^2	NN	O
/4t	NN	O
will	MD	O
be	VB	O
an	DT	O
approximation	NN	O

of	IN	O
pi	NN	O
.	.	O
I'm	NNP	O
not	RB	O
sure	JJ	O
what	WP	O
'	''	O
close	RB	O
enough	IN	O
'	''	O

means	NNS	O
,	,	O
but	CC	O
from	IN	O
my	PRP$	O
tests	NNS	O
,	,	O
one	CD	O
iteration	NN	O
got	VBD	O
2digits	CD	O

,	,	O
two	CD	O
got	VBD	O
7	CD	O
,	,	O
and	CC	O
three	CD	O
had	VBD	O
15	CD	O
,	,	O
of	IN	O

course	NN	O
this	DT	O
is	VBZ	O
with	IN	O
doubles	NNS	O
,	,	O
so	IN	O
it	PRP	O
might	MD	O
have	VB	O
error	NN	O

based	VBN	O
on	IN	O
its	PRP$	O
representation	NN	O
and	CC	O
the	DT	O
'	''	O
true	JJ	O
'	POS	O
calculation	NN	O
could	MD	O

be	VB	O
more	JJR	O
accurate	JJ	O
.	.	O
let	VB	O
pi_2	JJ	O
iters	NNS	O
=	VBP	O
let	VB	O
rec	VB	O
loop_	VB	O

a	DT	O
b	NN	O
t	NN	O
p	NN	O
i	NN	O
=	VBP	O
if	IN	O
i	JJ	O
=	VBP	O
0	CD	O
then	RB	O

a	DT	O
,	,	O
b	NN	O
,	,	O
t	NN	O
,	,	O
p	NN	O
else	RB	O
let	VB	O
a_n	JJ	O
=	NNP	O

(	(	O
a	DT	O
+	NN	O
.	.	O
b	NN	O
)	)	O
/	NN	O
.	.	O
2	CD	O
.	.	O
0	CD	O

and	CC	O
b_n	VB	O
=	NNP	O
sqrt	NN	O
(	(	O
a	DT	O
*	NN	O
.	.	O
b	NN	O
)	)	O
and	CC	O

p_n	JJ	O
=	NN	O
2	CD	O
.	.	O
0	CD	O
*	NN	O
.	.	O
p	NN	O
in	IN	O
let	NN	O
t_n	NN	O

=	NNP	O
t	NN	O
-.	NNP	O
(	(	O
p	JJ	O
*	NN	O
.	.	O
(	(	O
a	DT	O
-.	NNP	O
a_n	NN	O

)	)	O
*	NN	O
.	.	O
(	(	O
a	DT	O
-.	NNP	B-API
a_n	NN	I-API
)	)	L-API
)	)	O
in	IN	O
loop_	NN	O

a_n	NN	O
b_n	NN	O
t_n	NN	O
p_n	NN	O
(	(	O
i	JJ	O
-	:	O
1	CD	O
)	)	O
in	IN	O
let	NN	O

a	DT	O
,	,	O
b	NN	O
,	,	O
t	NN	O
,	,	O
p	NN	O
=	NNP	O
loop_	NN	O
(	(	O
1	CD	O

.	.	O
0	CD	O
)	)	O
(	(	O
1	CD	O
.	.	O
0	CD	O
/	NN	O
.	.	O
(	(	O
sqrt	JJ	O

2	CD	O
.	.	O
0	CD	O
)	)	O
)	)	O
(	(	O
1	CD	O
.	.	O
0	CD	O
/	NN	O
.	.	O

4	CD	O
.	.	O
0	CD	O
)	)	O
(	(	O
1	CD	O
.	.	O
0	CD	O
)	)	O
iters	NNS	O
in	IN	O

(	(	O
a	DT	O
+	NN	O
.	.	O
b	NN	O
)	)	O
*	NN	O
.	.	O
(	(	O
a	DT	O
+	NN	O

.	.	O
b	NN	O
)	)	O
/	NN	O
.	.	O
(	(	O
4	CD	O
.	.	O
0	CD	O
*	NN	O
.	.	O

t	NN	I-API
)	)	L-API
Lastly	RB	O
,	,	O
how	WRB	O
about	IN	O
some	DT	O
pi	JJ	O
golf	NN	O
(	(	O
800	CD	O

digits	NNS	O
)	)	O
?	.	O
160	CD	O
characters	NNS	O
!	.	O
int	NN	O
a	DT	O
=10000	NN	O
,	,	O
b	NN	O

,	,	I-API
c	NN	I-API
=2800	NN	I-API
,	,	I-API
d	NN	I-API
,	,	I-API
e	NN	I-API
,	,	I-API
f	JJ	I-API
[2801	NNP	I-API
]	NNP	I-API

,	,	O
g	NN	O
;main	NNP	O
(	(	O
)	)	O
{for	FW	O
(	(	O
;b	SYM	O
-	:	O
c	NN	O
;	:	O

)f	CC	O
[b	VB	O
+	JJ	O
+	NNP	O
]	NNP	O
=a	NNP	O
/5	NNP	O
;for	NNP	O
(	(	O
;d	NNP	O
=0	NNP	O

,	,	O
g	NN	O
=c	NNP	O
*2	NNP	O
;c	NNP	O
-	:	O
=14	NN	O
,	,	O
printf(	VB	O
"	CD	O
%	NN	O

.	.	I-API
4d	CD	I-API
"	NN	I-API
,	,	I-API
e	FW	I-API
+d	NNP	I-API
/a	NNP	I-API
)	)	L-API
,	,	O
e	JJ	O
=d	NNP	O

%a	NNP	O
)for	NNP	O
(	(	O
b	SYM	O
=c	NNP	O
;d	NNP	O
+	NNP	O
=f	NNP	O
[b	NNP	O
]	NNP	O
*a	NNP	O

,	,	I-API
f	JJ	I-API
[b	NNP	I-API
]	NNP	I-API
=d	NNP	I-API
%	NN	I-API
--	:	I-API
g	NN	I-API
,	,	I-API
d	NN	I-API
/	NNP	I-API

=g	NNP	I-API
--	:	I-API
,	,	I-API
--	:	I-API
b	SYM	I-API
;d	JJ	I-API
*	NNP	I-API
=b	NNP	I-API
)	)	L-API
;	:	O
}	)	O

A	NNP	O
few	JJ	O
things	NNS	O
:	:	O
You	PRP	O
are	VBP	O
creating	VBG	O
(	(	O
and	CC	O
not	RB	O
using	VBG	O

)	)	O
an	DT	O
unnecessary	JJ	O
toplevel	NN	O
window	NN	O
,	,	O
named	VBN	O
window	NN	O
.	.	O
You	PRP	O
can	MD	O

just	RB	O
delete	VB	O
these	DT	O
lines	NNS	O
:	:	O
window	NN	O
=	NN	O
gtk_window_new(	VBP	O
GTK_WINDOW_TOPLEVEL	NNP	O
)	)	O
;g_signal_connect	VBP	O

(	(	I-API
G_OBJECT(	NNP	I-API
window	NN	I-API
)	)	L-API
,	,	O
"delete_event	JJ	O
"	NN	O
,	,	O
G_CALLBACK(	NNP	B-API
delete_event	NN	I-API
)	)	L-API

,	,	I-API
NULL	NNP	I-API
)	)	L-API
;g_signal_connect	VBP	O
(	(	O
G_OBJECT(	NNP	B-API
window	NN	I-API
)	)	L-API
,	,	O
"destroy	NNP	O
"	NNP	O

,	,	O
G_CALLBACK(	NNP	B-API
destroy	NN	I-API
)	)	L-API
,	,	O
NULL	NNP	O
)	)	O
;	:	O
Also	RB	O
,	,	O
the	DT	O

flow	NN	O
doesn't	NN	O
seem	VBP	O
quite	RB	O
right	RB	O
.	.	O
gtk_main()	NN	O
starts	VBZ	O
the	DT	O
GTK	NNP	O
main	JJ	O

loop	NN	O
,	,	O
which	WDT	O
blocks	VBZ	O
until	IN	O
something	NN	O
exits	NNS	O
it	PRP	O
.	.	O
gtk_dialog_run()	NN	O
also	RB	O

starts	VBZ	O
a	DT	O
main	JJ	O
loop	NN	O
,	,	O
but	CC	O
it	PRP	O
exits	VBZ	O
as	RB	O
soon	RB	O
as	IN	O

one	CD	O
of	IN	O
the	DT	O
buttons	NNS	O
is	VBZ	O
clicked	VBN	O
.	.	O
I	PRP	O
think	VBP	O
it	PRP	O
might	MD	O

be	VB	O
enough	RB	O
for	IN	O
you	PRP	O
to	TO	O
remove	VB	O
the	DT	O
gtk_init_add()	NN	O
and	CC	O
gtk_main()	NN	O
calls	NNS	O

,	,	O
and	CC	O
simply	RB	O
deal	VB	O
with	IN	O
the	DT	O
return	NN	O
value	NN	O
.	.	O
Also	RB	O
the	DT	O

gtk_widget_destroy()	NN	O
call	NN	O
is	VBZ	O
unnecessary	JJ	O
,	,	O
as	IN	O
the	DT	O
dialog	NN	O
window	NN	O
is	VBZ	O
automatically	RB	O

destroyed	VBN	O
when	WRB	O
gtk_dialog_run()	JJ	O
returns	NNS	O
.	.	O
You	PRP	O
may	MD	O
also	RB	O
be	VB	O
interested	JJ	O
in	IN	O

the	DT	O
output	NN	O
of	IN	O
the	DT	O
explain()	NN	O
method	NN	O
,	,	O
and	CC	O
the	DT	O
resulting	JJ	O
Explanation	NNP	O

object	NN	O
,	,	O
which	WDT	O
will	MD	O
give	VB	O
you	PRP	O
an	DT	O
idea	NN	O
of	IN	O
how	WRB	O
things	NNS	O

are	VBP	O
scored	VBN	O
the	DT	O
way	NN	O
they	PRP	O
are	VBP	O
.	.	O
Well	NNP	O
,	,	O
in	IN	O
Java	NNP	O

an	DT	O
int	NN	O
is	VBZ	O
a	DT	O
primitive	JJ	O
while	IN	O
an	DT	O
Integer	NNP	O
is	VBZ	O
an	DT	O
Object	NNP	O

.	.	O
Meaning	NNP	O
,	,	O
if	IN	O
you	PRP	O
made	VBD	O
a	DT	O
new	JJ	O
Integer	NN	O
:	:	O
Integer	NN	O

i	VB	O
=	VBP	O
new	JJ	O
Integer(	NNP	B-API
6	CD	I-API
)	)	L-API
;	:	O
You	PRP	O
could	MD	O
call	VB	O
some	DT	O

method	NN	O
on	IN	O
i	NN	O
:	:	O
String	NN	O
s	NN	O
=	NNP	O
i.toString()	NN	U-API
;	:	O
/	CC	O
/sets	NNS	O

s	VBP	O
the	DT	O
string	NN	O
representation	NN	O
of	IN	O
i	JJ	O
Whereas	NNP	O
with	IN	O
an	DT	O
int	NN	O
:	:	O

int	NN	O
i	NN	O
=	VBP	O
6	CD	O
;	:	O
You	PRP	O
cannot	VBP	O
call	VB	O
any	DT	O
methods	NNS	O
on	IN	O

it	PRP	O
,	,	O
because	IN	O
it	PRP	O
is	VBZ	O
simply	RB	O
a	DT	O
primitive	NN	O
.	.	O
So	RB	O
:	:	O

String	VBG	O
s	NN	O
=	NNP	O
i.toString()	NN	U-API
;	:	O
/	NNP	O
/will	NNP	O
not	RB	O
work	NN	O
!	.	O
!	.	O

!	.	O
would	MD	O
produce	VB	O
an	DT	O
error	NN	O
,	,	O
because	IN	O
int	NN	O
is	VBZ	O
not	RB	O
an	DT	O

object	NN	O
.	.	O
int	NN	O
is	VBZ	O
one	CD	O
of	IN	O
the	DT	O
few	JJ	O
primitives	NNS	O
in	IN	O
Java	NNP	O

(	(	O
along	IN	O
with	IN	O
char	NN	O
and	CC	O
some	DT	O
others	NNS	O
)	)	O
.	.	O
I'm	NNP	O
not	RB	O

100	CD	O
%	NN	O
sure	JJ	O
,	,	O
but	CC	O
I'm	NNP	O
thinking	NN	O
that	IN	O
the	DT	O
Integer	NNP	O
object	VB	O

more	RBR	O
or	CC	O
less	RBR	O
just	RB	O
has	VBZ	O
an	DT	O
int	NN	O
property	NN	O
and	CC	O
a	DT	O
whole	JJ	O

bunch	NN	O
of	IN	O
methods	NNS	O
to	TO	O
interact	VB	O
with	IN	O
that	DT	O
property	NN	O
(	(	O
like	IN	O
the	DT	O

toString()	NN	O
method	NN	O
for	IN	O
example	NN	O
)	)	O
.	.	O
So	RB	O
Integer	NNP	O
is	VBZ	O
a	DT	O
fancy	JJ	O

way	NN	O
to	TO	O
work	VB	O
with	IN	O
an	DT	O
int	NN	O
(	(	O
Just	NNP	O
as	IN	O
perhaps	RB	O
String	NNP	O

is	VBZ	O
a	DT	O
fancy	JJ	O
way	NN	O
to	TO	O
work	VB	O
with	IN	O
a	DT	O
group	NN	O
of	IN	O
chars	NNS	O

)	)	O
.	.	O
I	PRP	O
know	VBP	O
that	IN	O
Java	NNP	O
isn't	NN	O
C	NNP	O
,	,	O
but	CC	O
since	IN	O

I've	NNP	O
never	RB	O
programmed	VBD	O
in	IN	O
C	NNP	O
this	DT	O
is	VBZ	O
the	DT	O
closest	JJS	O
I	PRP	O
could	MD	O

come	VB	O
to	TO	O
the	DT	O
answer	NN	O
.	.	O
Hope	VBP	O
this	DT	O
helps	NN	O
!	.	O
Integer	NNP	O
object	JJ	O

javadoc	NN	O
Integer	NNP	O
Ojbect	NNP	O
vs	NN	O
.	.	O
int	NN	O
primitive	JJ	B-API
comparison	NN	I-API
Interesting	NNP	I-API
question	NN	I-API
!	.	I-API

I	PRP	O
would	MD	O
do	VB	O
this	DT	O
by	IN	O
picking	VBG	O
combinations	NNS	O
,	,	O
something	NN	O
like	IN	O
the	DT	O

following	VBG	O
in	IN	O
python	NN	O
.	.	O
The	DT	O
hardest	JJS	O
part	NN	O
is	VBZ	O
probably	RB	O
first	JJ	O
pass	NN	O

verification	NN	O
,	,	O
i	NN	O
.	.	O
e	NN	O
.	.	O
if	IN	O
f(	JJ	O
1	CD	O
,	,	O
2	CD	O

,	,	I-API
3	CD	I-API
)	)	L-API
returns	NNS	O
true	JJ	O
,	,	O
is	VBZ	O
that	IN	O
a	DT	O
correct	JJ	O
result	NN	O

?	.	O
Once	RB	O
you	PRP	O
have	VBP	O
verified	VBN	O
that	IN	O
,	,	O
then	RB	O
this	DT	O
is	VBZ	O
a	DT	O

good	JJ	O
basis	NN	O
for	IN	O
regression	NN	O
testing	NN	O
.	.	O
Probably	RB	O
it's	VBZ	O
a	DT	O
good	JJ	O
idea	NN	O

to	TO	O
make	VB	O
a	DT	O
set	NN	O
of	IN	O
test	NN	O
cases	NNS	O
that	IN	O
you	PRP	O
know	VBP	O
will	MD	O

be	VB	O
all	DT	O
true	JJ	O
(	(	O
e	NN	O
.	.	O
g	NN	O
.	.	O
3	CD	O
,	,	O
4	CD	O

,	,	O
5	CD	O
for	IN	O
this	DT	O
triangle	JJ	O
case	NN	O
)	)	O
,	,	O
and	CC	O
a	DT	O
set	NN	O

of	IN	O
test	NN	O
cases	NNS	O
that	IN	O
you	PRP	O
know	VBP	O
will	MD	O
be	VB	O
all	DT	O
false	JJ	O
(	(	O

e	NN	O
.	.	O
g	NN	O
.	.	O
0	CD	O
,	,	O
1	CD	O
,	,	O
inf	NN	O
)	)	O
.	.	O

Then	RB	O
you	PRP	O
can	MD	O
more	VB	O
easily	RB	O
verify	VB	O
the	DT	O
tests	NNS	O
are	VBP	O
correct	JJ	O
.	.	O

#	#	O
xpermutations	NNS	O
from	IN	O
http	NN	O
:	:	O
/	JJ	O
/code	NN	O
.	.	O
activestate	NN	O
.	.	O
com	NN	O

/recipes	VBZ	O
/190465	CD	O
from	IN	O
xpermutations	NNS	O
import	VBP	O
*	JJ	O
lengths	NNS	O
=	VBP	O
[	SYM	O
-	:	O
1	CD	O

,	,	O
0	CD	O
,	,	O
1	CD	O
,	,	O
5	CD	O
,	,	O
10	CD	O
,	,	O
0	CD	O
,	,	O

1000	CD	O
,	,	O
'	''	O
inf	NN	O
'	POS	O
]	NN	O
for	IN	O
c	NN	O
in	IN	O
xselections(	JJ	O
lengths	NNS	O

,	,	I-API
3	CD	I-API
)	)	L-API
:	:	O
#	#	O
or	CC	O
xuniqueselections	NNS	O
print	VBP	O
c	JJ	O
(-	JJ	O
1	CD	O

,	,	I-API
-	:	I-API
1	CD	I-API
,	,	I-API
-	:	I-API
1	CD	I-API
)	)	L-API
;	:	O
(-	JJ	B-API
1	CD	I-API
,	,	I-API

-	:	I-API
1	CD	I-API
,	,	I-API
0	CD	I-API
)	)	L-API
;	:	O
(-	JJ	B-API
1	CD	I-API
,	,	I-API
-	:	I-API
1	CD	I-API

,	,	I-API
1	CD	I-API
)	)	L-API
;	:	O
(-	JJ	B-API
1	CD	I-API
,	,	I-API
-	:	I-API
1	CD	I-API
,	,	I-API
5	CD	I-API

)	)	L-API
;	:	O
(-	JJ	B-API
1	CD	I-API
,	,	I-API
-	:	I-API
1	CD	I-API
,	,	I-API
10	CD	I-API
)	)	L-API
;	:	O

(-	JJ	B-API
1	CD	I-API
,	,	I-API
-	:	I-API
1	CD	I-API
,	,	I-API
0	CD	I-API
)	)	L-API
;	:	O
(-	JJ	B-API
1	CD	I-API

,	,	I-API
-	:	I-API
1	CD	I-API
,	,	I-API
1000	CD	I-API
)	)	L-API
;	:	O
(-	JJ	B-API
1	CD	I-API
,	,	I-API
-	:	I-API

1	CD	I-API
,	,	I-API
inf	NN	I-API
)	)	L-API
;	:	O
(-	JJ	O
1	CD	O
,	,	O
0	CD	O
,	,	O
-	:	O

1	CD	I-API
)	)	L-API
;	:	O
(-	JJ	B-API
1	CD	I-API
,	,	I-API
0	CD	I-API
,	,	I-API
0	CD	I-API
)	)	L-API
;	:	O

...	:	O
There	EX	O
are	VBP	O
three	CD	O
ways	NNS	O
to	TO	O
iterate	VB	O
over	IN	O
a	DT	O
result	NN	O
set	VBN	O

.	.	O
The	DT	O
best	JJS	O
way	NN	O
in	IN	O
terms	NNS	O
of	IN	O
both	DT	O
readability	NN	O
and	CC	O
performance	NN	O

is	VBZ	O
usually	RB	O
to	TO	O
use	VB	O
the	DT	O
built-in	NN	O
cursor	NN	O
iterator	NN	O
.	.	O
curs.execute(	NN	O
'	''	O

select	JJ	O
*	NN	O
from	IN	O
people	NNS	O
'	POS	O
)	)	O
for	IN	O
row	NN	O
in	IN	O
curs	NNS	O
:	:	O

print	NN	O
row	NN	O
You	PRP	O
can	MD	O
fetch	VB	O
all	PDT	O
the	DT	O
rows	NNS	O
into	IN	O
a	DT	O
list	NN	O

,	,	O
but	CC	O
this	DT	O
can	MD	O
have	VB	O
some	DT	O
bad	JJ	O
side	NN	O
effects	NNS	O
if	IN	O
the	DT	O

result	NN	O
set	VBN	O
is	VBZ	O
large	JJ	O
.	.	O
You	PRP	O
have	VBP	O
to	TO	O
wait	VB	O
for	IN	O
the	DT	O

entire	JJ	O
result	NN	O
set	VBN	O
to	TO	O
be	VB	O
returned	VBN	O
to	TO	O
your	PRP$	O
client	NN	O
process	NN	O
.	.	O

You	PRP	O
may	MD	O
eat	VB	O
up	RP	O
a	DT	O
lot	NN	O
of	IN	O
memory	NN	O
in	IN	O
your	PRP$	O
client	NN	O

to	TO	O
hold	VB	O
the	DT	O
built-up	JJ	O
list	NN	O
.	.	O
It	PRP	O
may	MD	O
take	VB	O
a	DT	O
while	NN	O

for	IN	O
Python	NNP	O
to	TO	O
construct	VB	O
and	CC	O
deconstruct	VB	O
the	DT	O
list	NN	O
which	WDT	O
you	PRP	O
are	VBP	O

going	VBG	O
to	TO	O
immediately	RB	O
discard	VB	O
anyways	NNS	O
.	.	O
for	IN	O
row	NN	O
in	IN	O
curs.fetchall()	NN	O
:	:	O

print	NN	O
row	NN	O
Finally	RB	O
,	,	O
you	PRP	O
can	MD	O
loop	VB	O
over	IN	O
the	DT	O
result	NN	O
set	VBN	O

fetching	VBG	O
one	CD	O
row	NN	O
at	IN	O
a	DT	O
time	NN	O
.	.	O
In	IN	O
general	JJ	O
,	,	O
there's	JJ	O

no	DT	O
particular	JJ	O
advantage	NN	O
in	IN	O
doing	VBG	O
this	DT	O
over	IN	O
using	VBG	O
the	DT	O
iterator	NN	O
.	.	O

If	IN	O
there	EX	O
is	VBZ	O
something	NN	O
in	IN	O
your	PRP$	O
programming	NN	O
logic	NN	O
that	WDT	O
seems	VBZ	O
to	TO	O

indicate	VB	O
there	EX	O
is	VBZ	O
an	DT	O
advantage	NN	O
in	IN	O
doing	VBG	O
this	DT	O
,	,	O
perhaps	RB	O
you	PRP	O

should	MD	O
reconsider	VB	O
your	PRP$	O
programming	VBG	O
logic	NN	O
.	.	O
row	VB	O
=	JJ	O
curs.fetchone()	NN	O
while	IN	O
row	NN	O

:	:	O
print	NN	O
row	NN	O
row	NN	O
=	NNP	O
curs.fetchone()	NN	O
I'm	NNP	O
looking	VBG	O
for	IN	O
a	DT	O
performant	NN	O

,	,	O
reasonably	RB	O
robust	JJ	O
RNG	NNP	O
using	VBG	O
no	DT	O
special	JJ	O
hardware	NN	O
.	.	O
It	PRP	O
can	MD	O

use	VB	O
mathematical	JJ	O
methods	NNS	O
(	(	O
Mersenne	NNP	B-API
Twister	NNP	I-API
,	,	I-API
etc	NN	I-API
)	)	L-API
,	,	O
it	PRP	O

can	MD	O
"collect	VB	O
entropy	JJ	O
"	NN	O
from	IN	O
the	DT	O
machine	NN	O
,	,	O
whatever	WDT	O
.	.	O
On	IN	O

Linux	NNP	O
/etc	NNP	O
we	PRP	O
have	VBP	O
a	DT	O
drand48()	NN	O
which	WDT	O
generates	VBZ	O
48	CD	O
random	NN	O
bits	NNS	O

.	.	O
I'd	NNP	O
like	IN	O
a	DT	O
similar	JJ	U-API
function	NN	O
/class	NN	O
for	IN	O
C	NNP	O
+	NNP	O
+	NNP	O

or	CC	O
C	NNP	O
#	#	O
which	WDT	O
can	MD	O
generate	VB	O
more	JJR	O
than	IN	O
32	CD	O
bits	NNS	O
of	IN	O

randomness	NN	O
and	CC	O
which	WDT	O
low-order	NN	O
bits	NNS	O
are	VBP	O
equally	RB	O
as	RB	O
random	JJ	O
as	IN	O
high-order	NN	O

bits	NNS	O
.	.	O
It	PRP	O
doesn't	VBZ	O
have	VB	O
to	TO	O
be	VB	O
cryptographically	RB	O
secure	JJ	O
but	CC	O
it	PRP	O

must	MD	O
not	RB	O
use	VB	O
or	CC	O
be	VB	O
based	VBN	O
on	IN	O
the	DT	O
C-language	JJ	O
rand()	NN	O
or	CC	O

.	.	O
NET	JJ	O
System	NN	O
.	.	O
Random	NNP	O
.	.	O
Any	NNP	O
source	NN	O
code	NN	O
,	,	O
links	VBZ	O

to	TO	O
source	NN	O
,	,	O
etc	FW	O
.	.	O
would	MD	O
be	VB	O
appreciated	VBN	O
!	.	O
Failing	VBG	O
that	IN	O

,	,	O
what	WP	O
TYPE	NNP	O
of	IN	O
RNG	NNP	O
should	MD	O
I	PRP	O
be	VB	O
looking	VBG	O
for	IN	O
?	.	O

Hmm	NNP	O
,	,	O
ok	NN	O
.	.	O
I'd	NNP	O
suggest	VBP	O
code	NN	O
like	IN	O
this	DT	O
,	,	O
then	RB	O

:	:	O
typedef	VB	O
struct	NN	O
{	(	O
int	JJ	O
type	NN	O
;	:	O
int	JJ	O
result	NN	O
;	:	O
}	)	O

DialogData	NNP	I-API
;static	JJ	I-API
gbooleandisplay_dialog(	NN	I-API
gpointer	NN	I-API
user_data	NN	I-API
)	)	L-API
{	(	O
DialogData	NNP	O
*dialog_data	NNP	O
=	NNP	O
user_data	NN	O

;	:	O
GtkWidget	NNP	O
*dialog	NNP	O
;	:	O
if	IN	O
(	(	O
dialog_data	SYM	O
-	:	O
>type	NN	O
&	CC	O
MB_YESNO	NNP	O

)	)	O
dialog	NN	O
=	JJ	O
gtk_message_dialog_new(	NN	O
...	:	O
)	)	O
;	:	O
else	RB	O
dialog	NN	O
=	JJ	O
gtk_message_dialog_new(	NN	O

...	:	O
)	)	O
;	:	O
/	CC	O
/	VB	O
Set	NNP	O
title	NN	O
,	,	O
etc	FW	O
.	.	O
dialog_data	SYM	O

-	:	O
>result	NN	O
=	JJ	O
gtk_dialog_run(	NN	O
...	:	O
)	)	O
;	:	O
gtk_main_quit()	NN	U-API
;	:	O
/	CC	O
/	VB	O

Quits	VBZ	O
the	DT	O
main	JJ	O
loop	NN	O
run	NN	O
in	IN	O
MessageBox()	NNP	O
return	NN	O
FALSE	NNP	O
;	:	O
}int	NN	O

MessageBox(	NNP	O
...	:	O
)	)	O
{	(	O
DialogData	NNP	O
dialog_data	NN	O
;	:	O
dialog_data	NNS	O
.	.	O
type	NN	O
=	NN	O

type	NN	O
;	:	O
gtk_idle_add(	CC	B-API
display_dialog	NN	I-API
,	,	I-API
&dialog_data	NNP	I-API
)	)	L-API
;	:	O
gtk_main()	NN	U-API
;	:	O
/	CC	O

/	VB	O
Do	NNP	O
stuff	VB	O
based	VBN	O
on	IN	O
dialog_data	NN	O
.	.	O
result	NN	O
}	)	O
The	DT	O
struct	NN	O

is	VBZ	O
because	IN	O
you	PRP	O
need	VBP	O
to	TO	O
pass	VB	O
around	RP	O
a	DT	O
couple	NN	O
pieces	NNS	O
of	IN	O

data	NNS	O
.	.	O
The	DT	O
gtk_idle_add()	NN	O
call	NN	O
adds	VBZ	O
a	DT	O
method	NN	O
to	TO	O
be	VB	O
run	VBN	O

when	WRB	O
the	DT	O
main	JJ	O
loop	NN	O
is	VBZ	O
running	VBG	O
and	CC	O
idle	JJ	O
,	,	O
and	CC	O
the	DT	O

FALSE	NNP	O
return	NN	O
value	NN	O
from	IN	O
the	DT	O
display_dialog()	NN	O
call	NN	O
means	VBZ	O
that	IN	O
it's	VBG	O
only	RB	O

run	VB	O
once	RB	O
.	.	O
After	IN	O
we	PRP	O
get	VBP	O
the	DT	O
result	NN	O
from	IN	O
the	DT	O
dialog	NN	O

,	,	O
we	PRP	O
quit	VBP	O
the	DT	O
main	JJ	O
loop	NN	O
.	.	O
That'll	NNP	O
cause	VBP	O
the	DT	O
gtk_main()	NN	O

in	IN	O
your	PRP$	O
main	JJ	O
MessageBox()	NNP	O
method	NN	O
to	TO	O
return	VB	O
,	,	O
and	CC	O
you'll	RB	O
be	VB	O

able	JJ	O
to	TO	O
access	NN	O
the	DT	O
result	NN	O
from	IN	O
there	RB	O
.	.	O
Hope	VB	O
this	DT	O
helps	NN	O

!	.	O
I'll	NNP	O
add	VB	O
to	TO	O
the	DT	O
excellent	JJ	O
answers	NNS	O
given	VBN	O
above	IN	O
,	,	O
and	CC	O

talk	VB	O
about	IN	O
boxing	NN	O
and	CC	O
unboxing	NN	O
,	,	O
and	CC	O
how	WRB	O
this	DT	O
applies	VBZ	O
to	TO	O

Java	NNP	O
(	(	O
although	IN	O
C	NNP	O
#	#	O
has	VBZ	O
it	PRP	O
too	RB	O
)	)	O
.	.	O
I'll	NNP	O

use	NN	O
just	RB	O
Java	NNP	O
terminology	NN	O
,	,	O
because	IN	O
I	PRP	O
am	VBP	O
more	RBR	O
au	JJ	O
fait	NN	O

with	IN	O
that	DT	O
.	.	O
As	IN	O
the	DT	O
answers	NNS	O
mentioned	VBD	O
,	,	O
int	NN	O
is	VBZ	O
just	RB	O

a	DT	O
number	NN	O
(	(	O
called	VBN	O
the	DT	O
unboxed	JJ	O
type	NN	O
)	)	O
,	,	O
whereas	JJ	O
Integer	NNP	O

is	VBZ	O
an	DT	O
object	NN	O
(	(	O
which	WDT	O
contains	VBZ	O
the	DT	O
number	NN	O
,	,	O
hence	RB	O
a	DT	O

boxed	JJ	O
type	NN	O
)	)	O
.	.	O
In	IN	O
Java	NNP	O
terms	NNS	O
,	,	O
that	DT	O
means	VBZ	O
(	(	O

apart	RB	O
from	IN	O
not	RB	O
being	VBG	O
able	JJ	O
to	TO	O
call	VB	O
methods	NNS	O
on	IN	O
int	NN	O
)	)	O

,	,	O
you	PRP	O
cannot	VBP	O
store	VB	O
int	NN	O
or	CC	O
other	JJ	O
non-object	JJ	O
types	NNS	O
in	IN	O
collections	NNS	O

(	(	O
List	NNP	O
,	,	O
Map	NNP	O
,	,	O
etc	FW	O
.	.	O
)	)	O
.	.	O
In	IN	O
order	NN	O

to	TO	O
store	VB	O
them	PRP	O
,	,	O
you	PRP	O
must	MD	O
first	VB	O
box	VB	O
them	PRP	O
up	RP	O
in	IN	O

its	PRP$	O
corresponding	NN	O
boxed	JJ	O
type	NN	O
.	.	O
Java	NNP	O
5	CD	O
onwards	NNS	O
have	VBP	O
something	NN	O
called	VBN	O

auto-boxing	JJ	O
and	CC	O
auto-unboxing	JJ	O
which	WDT	O
allow	VBP	O
the	DT	O
boxing	NN	O
/unboxing	VBG	O
to	TO	O
be	VB	O
done	VBN	O

behind	IN	O
the	DT	O
scenes	NNS	O
.	.	O
Compare	NNP	O
and	CC	O
contrast	NN	O
:	:	O
Java	NNP	O
5	CD	O
version	NN	O

:	:	O
Deque	NNP	O
<Integer	NNP	O
>	NNP	O
queue	NN	O
;void	NNP	O
add(	NN	B-API
int	NN	I-API
n	NN	I-API
)	)	L-API
{	(	O

queue.add(	JJ	B-API
n	NN	I-API
)	)	L-API
;	:	O
}int	CC	O
remove()	VB	O
{	(	O
return	VB	O
queue.remove()	NN	U-API
;	:	O
}	)	O

Java	NNP	O
1	CD	O
.	.	O
4	CD	O
or	CC	O
earlier	JJR	O
(	(	O
no	DT	O
generics	NNS	O
either	CC	O
)	)	O

:	:	O
Deque	NNP	O
queue	VBZ	O
;void	JJ	O
add(	NN	B-API
int	NN	I-API
n	NN	I-API
)	)	L-API
{	(	O
queue.add(	JJ	O
Integer.valueOf(	NNP	O

n	NN	I-API
)	)	L-API
)	)	O
;	:	O
}int	CC	O
remove()	VB	O
{	(	O
return	VB	O
((	NNP	B-API
Integer	NNP	I-API
)	)	L-API

queue.remove()	NN	O
)	)	O
.	.	O
intValue()	NN	O
;	:	O
}	)	O
It	PRP	O
must	MD	O
be	VB	O
noted	VBN	O
that	IN	O

despite	IN	O
the	DT	O
brevity	NN	O
in	IN	O
the	DT	O
Java	NNP	O
5	CD	O
version	NN	O
,	,	O
both	DT	O
versions	NNS	O

generate	VBP	O
identical	JJ	O
bytecode	NN	O
.	.	O
Thus	RB	O
,	,	O
although	IN	O
auto-boxing	JJ	O
and	CC	O
auto-unboxing	JJ	O
is	VBZ	O

very	RB	O
convenient	JJ	O
because	IN	O
you	PRP	O
write	VBP	O
less	JJR	O
code	NN	O
,	,	O
these	DT	O
operations	NNS	O
do	VBP	O

happen	VB	O
behind	IN	O
the	DT	O
scenes	NNS	O
,	,	O
with	IN	O
the	DT	O
same	JJ	O
runtime	NN	O
costs	NNS	O
,	,	O

so	IN	O
you	PRP	O
still	RB	O
have	VBP	O
to	TO	O
be	VB	O
aware	JJ	O
of	IN	O
their	PRP$	O
existence	NN	O
.	.	O

Hope	VBP	O
this	DT	O
helps	NN	O
!	.	O
I'm	NNP	O
not	RB	O
a	DT	O
PHP	NNP	O
dev	NN	O
but	CC	O
Google	NNP	O

says	VBZ	O
that	IN	O
PHP	NNP	O
5	CD	O
+	NN	O
can	MD	O
instantiate	VB	O
COM	NNP	O
components	NNS	O
.	.	O
If	IN	O

you	PRP	O
can	MD	O
install	VB	O
Outlook	NNP	O
on	IN	O
a	DT	O
box	NN	O
you	PRP	O
could	MD	O
write	VB	O
a	DT	O

PHP	NNP	O
web	NN	O
service	NN	O
around	IN	O
the	DT	O
COM	NNP	O
component	NN	O
to	TO	O
handle	VB	O
the	DT	O
requests	NNS	O

you	PRP	O
need	VBP	O
.	.	O
$outlook	VB	O
=	JJ	O
COM(	NNP	B-API
"Outlook	NNP	I-API
.	.	I-API
Application	NNP	I-API
"	NNP	I-API
)	)	L-API

Outlook	NNP	O
API	NNP	O
referance	NN	O
I	PRP	O
found	VBD	O
this	DT	O
page	NN	O
which	WDT	O
shows	VBZ	O
what	WP	O
the	DT	O

difference	NN	O
between	IN	O
Proc	NNP	O
.	.	O
new	JJ	O
and	CC	O
lambda	JJ	O
are	VBP	O
.	.	O
According	VBG	O
to	TO	O

the	DT	O
page	NN	O
,	,	O
the	DT	O
only	JJ	O
difference	NN	O
is	VBZ	O
that	IN	O
a	DT	O
lambda	NN	O
is	VBZ	O

strict	JJ	O
about	IN	O
the	DT	O
number	NN	O
of	IN	O
arguments	NNS	O
it	PRP	O
accepts	VBZ	O
,	,	O
whereas	JJ	O
Proc	NNP	O

.	.	O
new	JJ	O
converts	NNS	O
missing	VBG	O
arguments	NNS	O
to	TO	O
nil	VB	O
.	.	O
Here	RB	O
is	VBZ	O
an	DT	O

example	NN	O
IRB	NNP	O
session	NN	O
illustrating	VBG	O
the	DT	O
difference	NN	O
:	:	O
irb(	NN	O
main	JJ	O
)	)	O
:001	FW	O

:0	FW	O
>	FW	O
l	NN	O
=	NNP	O
lambda	VBZ	O
{	(	O
|x	NN	O
,	,	O
y	CC	O
|	NNP	O
x	NNP	O

+	NNP	O
y	NN	O
}	)	O
=	NNP	O
>	NNP	O
#	#	O
<Proc	NNP	O
:0x00007fc605ec0748	NNP	O
@	NNP	O
(	(	O
irb	NN	O

)	)	O
:1	VBZ	O
>	JJ	O
irb(	NN	O
main	JJ	O
)	)	O
:002	FW	O
:0	FW	O
>	FW	O
p	FW	O
=	FW	O

Proc	NNP	O
.	.	O
new	JJ	O
{	(	O
|x	JJ	O
,	,	O
y	JJ	O
|	NNP	O
x	NNP	O
+	NNP	O
y	NN	O

}	)	O
=	NNP	O
>	NNP	O
#	#	O
<Proc	NNP	O
:0x00007fc605ea8698	NNP	O
@	NNP	O
(	(	O
irb	NN	O
)	)	O
:2	VBZ	O

>	JJ	O
irb(	NN	O
main	JJ	O
)	)	O
:003	FW	O
:0	FW	O
>	FW	O
l	NN	O
.	.	O
call	VB	O
"hello	JJ	B-API

"	NN	O
,	,	O
"world	NNP	O
"	NNP	O
=	NNP	O
>	NNP	O
"helloworld	NNP	O
"	NNP	O
irb(	NN	O
main	JJ	O
)	)	O

:004	FW	O
:0	FW	O
>	FW	O
p	NN	O
.	.	O
call	VB	O
"hello	JJ	B-API
"	NN	I-API
,	,	I-API
"world	NNP	I-API
"	NNP	I-API

=	NNP	I-API
>	NNP	I-API
"helloworld	NNP	I-API
"	NNP	I-API
irb(	NN	I-API
main	JJ	I-API
)	)	L-API
:005	FW	O
:0	FW	O
>	FW	O
l	NN	O

.	.	O
call	VB	O
"hello	JJ	O
"	JJ	O
ArgumentError	NN	O
:	:	O
wrong	JJ	O
number	NN	O
of	IN	O
arguments	NNS	O
(	(	O

1	CD	O
for	IN	O
2	CD	O
)	)	O
from	IN	O
(	(	O
irb	NN	O
)	)	O
:1	NN	O
from	IN	O
(	(	O

irb	NN	I-API
)	)	L-API
:5	VBZ	O
:in	JJ	O
`call	NN	O
'	''	O
from	IN	O
(	(	O
irb	NN	O
)	)	O
:5	NN	O

from	IN	O
:0	NNP	O
irb(	NN	O
main	JJ	O
)	)	O
:006	FW	O
:0	FW	O
>	FW	O
p	NN	O
.	.	O
call	VB	O

"hello	JJ	O
"	JJ	O
TypeError	NN	O
:	:	O
can't	NN	O
convert	VB	O
nil	NN	O
into	IN	O
String	VBG	O
from	IN	O
(	(	O

irb	NN	I-API
)	)	L-API
:2	VBZ	O
:in	JJ	O
`	``	O
+	NNS	O
'	''	O
from	IN	O
(	(	O
irb	NN	O
)	)	O

:2	NN	O
from	IN	O
(	(	O
irb	NN	O
)	)	O
:6	VBZ	O
:in	JJ	O
`call	NN	O
'	''	O
from	IN	O
(	(	O

irb	NN	I-API
)	)	L-API
:6	NN	O
from	IN	O
:0	VBG	O
The	DT	O
page	NN	O
also	RB	O
recommends	VBZ	O
using	VBG	O
lambda	JJ	O

unless	IN	O
you	PRP	O
specifically	RB	O
want	VBP	O
the	DT	O
error	NN	O
tolerant	JJ	O
behavior	NN	O
.	.	O
I	PRP	O
agree	VBP	O

with	IN	O
this	DT	O
sentiment	NN	O
.	.	O
Using	VBG	O
a	DT	O
lambda	NN	O
seems	VBZ	O
a	DT	O
tad	RB	O
more	RBR	O

concise	NN	O
,	,	O
and	CC	O
with	IN	O
such	JJ	O
an	DT	O
insignificant	JJ	O
difference	NN	O
,	,	O
it	PRP	O
seems	VBZ	O

the	DT	O
better	JJR	O
choice	NN	O
in	IN	O
the	DT	O
average	JJ	O
situation	NN	O
.	.	O
As	IN	O
for	IN	O
Ruby	NNP	O

1	CD	O
.	.	O
9	CD	O
,	,	O
sorry	NN	O
,	,	O
I	PRP	O
haven't	VBP	O
looked	VBD	O
into	IN	O
1	CD	O

.	.	O
9	CD	O
yet	RB	O
,	,	O
but	CC	O
I	PRP	O
don't	VBP	O
imagine	JJ	O
they	PRP	O
would	MD	O
change	VB	O

it	PRP	O
all	PDT	O
that	RB	O
much	JJ	O
(	(	O
don't	JJ	O
take	VB	O
my	PRP$	O
word	NN	O
for	IN	O
it	PRP	O

though	IN	O
,	,	O
it	PRP	O
seems	VBZ	O
you	PRP	O
have	VBP	O
heard	VBN	O
of	IN	O
some	DT	O
changes	NNS	O
,	,	O

so	IN	O
I	PRP	O
am	VBP	O
probably	RB	O
wrong	JJ	O
there	RB	O
)	)	O
.	.	O

